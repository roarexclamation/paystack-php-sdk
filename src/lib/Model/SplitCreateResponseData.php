<?php
/**
 * SplitCreateResponseData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SplitCreateResponseData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SplitCreateResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SplitCreateResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'currency' => 'string',
        'integration' => 'int',
        'domain' => 'string',
        'split_code' => 'string',
        'active' => 'bool',
        'bearer_type' => 'string',
        'bearer_subaccount' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'is_dynamic' => 'bool',
        'subaccounts' => '\OpenAPI\Client\Model\SplitSubaccountsArray[]',
        'total_subaccounts' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'currency' => null,
        'integration' => null,
        'domain' => null,
        'split_code' => null,
        'active' => null,
        'bearer_type' => null,
        'bearer_subaccount' => null,
        'created_at' => null,
        'updated_at' => null,
        'is_dynamic' => null,
        'subaccounts' => null,
        'total_subaccounts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'type' => false,
        'currency' => false,
        'integration' => false,
        'domain' => false,
        'split_code' => false,
        'active' => false,
        'bearer_type' => false,
        'bearer_subaccount' => false,
        'created_at' => false,
        'updated_at' => false,
        'is_dynamic' => false,
        'subaccounts' => false,
        'total_subaccounts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'currency' => 'currency',
        'integration' => 'integration',
        'domain' => 'domain',
        'split_code' => 'split_code',
        'active' => 'active',
        'bearer_type' => 'bearer_type',
        'bearer_subaccount' => 'bearer_subaccount',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'is_dynamic' => 'is_dynamic',
        'subaccounts' => 'subaccounts',
        'total_subaccounts' => 'total_subaccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'currency' => 'setCurrency',
        'integration' => 'setIntegration',
        'domain' => 'setDomain',
        'split_code' => 'setSplitCode',
        'active' => 'setActive',
        'bearer_type' => 'setBearerType',
        'bearer_subaccount' => 'setBearerSubaccount',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'is_dynamic' => 'setIsDynamic',
        'subaccounts' => 'setSubaccounts',
        'total_subaccounts' => 'setTotalSubaccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'currency' => 'getCurrency',
        'integration' => 'getIntegration',
        'domain' => 'getDomain',
        'split_code' => 'getSplitCode',
        'active' => 'getActive',
        'bearer_type' => 'getBearerType',
        'bearer_subaccount' => 'getBearerSubaccount',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'is_dynamic' => 'getIsDynamic',
        'subaccounts' => 'getSubaccounts',
        'total_subaccounts' => 'getTotalSubaccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('split_code', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('bearer_type', $data ?? [], null);
        $this->setIfExists('bearer_subaccount', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('is_dynamic', $data ?? [], null);
        $this->setIfExists('subaccounts', $data ?? [], null);
        $this->setIfExists('total_subaccounts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['split_code'] === null) {
            $invalidProperties[] = "'split_code' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['bearer_type'] === null) {
            $invalidProperties[] = "'bearer_type' can't be null";
        }
        if ($this->container['bearer_subaccount'] === null) {
            $invalidProperties[] = "'bearer_subaccount' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['is_dynamic'] === null) {
            $invalidProperties[] = "'is_dynamic' can't be null";
        }
        if ($this->container['subaccounts'] === null) {
            $invalidProperties[] = "'subaccounts' can't be null";
        }
        if ($this->container['total_subaccounts'] === null) {
            $invalidProperties[] = "'total_subaccounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return int
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param int $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets split_code
     *
     * @return string
     */
    public function getSplitCode()
    {
        return $this->container['split_code'];
    }

    /**
     * Sets split_code
     *
     * @param string $split_code split_code
     *
     * @return self
     */
    public function setSplitCode($split_code)
    {
        if (is_null($split_code)) {
            throw new \InvalidArgumentException('non-nullable split_code cannot be null');
        }
        $this->container['split_code'] = $split_code;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets bearer_type
     *
     * @return string
     */
    public function getBearerType()
    {
        return $this->container['bearer_type'];
    }

    /**
     * Sets bearer_type
     *
     * @param string $bearer_type bearer_type
     *
     * @return self
     */
    public function setBearerType($bearer_type)
    {
        if (is_null($bearer_type)) {
            throw new \InvalidArgumentException('non-nullable bearer_type cannot be null');
        }
        $this->container['bearer_type'] = $bearer_type;

        return $this;
    }

    /**
     * Gets bearer_subaccount
     *
     * @return int
     */
    public function getBearerSubaccount()
    {
        return $this->container['bearer_subaccount'];
    }

    /**
     * Sets bearer_subaccount
     *
     * @param int $bearer_subaccount bearer_subaccount
     *
     * @return self
     */
    public function setBearerSubaccount($bearer_subaccount)
    {
        if (is_null($bearer_subaccount)) {
            throw new \InvalidArgumentException('non-nullable bearer_subaccount cannot be null');
        }
        $this->container['bearer_subaccount'] = $bearer_subaccount;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets is_dynamic
     *
     * @return bool
     */
    public function getIsDynamic()
    {
        return $this->container['is_dynamic'];
    }

    /**
     * Sets is_dynamic
     *
     * @param bool $is_dynamic is_dynamic
     *
     * @return self
     */
    public function setIsDynamic($is_dynamic)
    {
        if (is_null($is_dynamic)) {
            throw new \InvalidArgumentException('non-nullable is_dynamic cannot be null');
        }
        $this->container['is_dynamic'] = $is_dynamic;

        return $this;
    }

    /**
     * Gets subaccounts
     *
     * @return \OpenAPI\Client\Model\SplitSubaccountsArray[]
     */
    public function getSubaccounts()
    {
        return $this->container['subaccounts'];
    }

    /**
     * Sets subaccounts
     *
     * @param \OpenAPI\Client\Model\SplitSubaccountsArray[] $subaccounts subaccounts
     *
     * @return self
     */
    public function setSubaccounts($subaccounts)
    {
        if (is_null($subaccounts)) {
            throw new \InvalidArgumentException('non-nullable subaccounts cannot be null');
        }
        $this->container['subaccounts'] = $subaccounts;

        return $this;
    }

    /**
     * Gets total_subaccounts
     *
     * @return int
     */
    public function getTotalSubaccounts()
    {
        return $this->container['total_subaccounts'];
    }

    /**
     * Sets total_subaccounts
     *
     * @param int $total_subaccounts total_subaccounts
     *
     * @return self
     */
    public function setTotalSubaccounts($total_subaccounts)
    {
        if (is_null($total_subaccounts)) {
            throw new \InvalidArgumentException('non-nullable total_subaccounts cannot be null');
        }
        $this->container['total_subaccounts'] = $total_subaccounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


