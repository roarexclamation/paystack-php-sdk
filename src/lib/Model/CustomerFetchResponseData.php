<?php
/**
 * CustomerFetchResponseData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerFetchResponseData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerFetchResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerFetchResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transactions' => 'mixed[]',
        'subscriptions' => 'mixed[]',
        'authorizations' => 'mixed[]',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'metadata' => '\OpenAPI\Client\Model\CustomerCreateResponseDataMetadata',
        'domain' => 'string',
        'customer_code' => 'string',
        'risk_action' => 'string',
        'id' => 'int',
        'integration' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'total_transactions' => 'int',
        'total_transaction_value' => 'mixed[]',
        'dedicated_account' => 'mixed',
        'dedicated_accounts' => 'mixed[]',
        'identified' => 'bool',
        'identifications' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transactions' => null,
        'subscriptions' => null,
        'authorizations' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'phone' => null,
        'metadata' => null,
        'domain' => null,
        'customer_code' => null,
        'risk_action' => null,
        'id' => null,
        'integration' => null,
        'created_at' => null,
        'updated_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'total_transactions' => null,
        'total_transaction_value' => null,
        'dedicated_account' => null,
        'dedicated_accounts' => null,
        'identified' => null,
        'identifications' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transactions' => false,
        'subscriptions' => false,
        'authorizations' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'phone' => false,
        'metadata' => false,
        'domain' => false,
        'customer_code' => false,
        'risk_action' => false,
        'id' => false,
        'integration' => false,
        'created_at' => false,
        'updated_at' => false,
        'created_at' => false,
        'updated_at' => false,
        'total_transactions' => false,
        'total_transaction_value' => false,
        'dedicated_account' => true,
        'dedicated_accounts' => true,
        'identified' => false,
        'identifications' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactions' => 'transactions',
        'subscriptions' => 'subscriptions',
        'authorizations' => 'authorizations',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'phone' => 'phone',
        'metadata' => 'metadata',
        'domain' => 'domain',
        'customer_code' => 'customer_code',
        'risk_action' => 'risk_action',
        'id' => 'id',
        'integration' => 'integration',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'total_transactions' => 'total_transactions',
        'total_transaction_value' => 'total_transaction_value',
        'dedicated_account' => 'dedicated_account',
        'dedicated_accounts' => 'dedicated_accounts',
        'identified' => 'identified',
        'identifications' => 'identifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactions' => 'setTransactions',
        'subscriptions' => 'setSubscriptions',
        'authorizations' => 'setAuthorizations',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'metadata' => 'setMetadata',
        'domain' => 'setDomain',
        'customer_code' => 'setCustomerCode',
        'risk_action' => 'setRiskAction',
        'id' => 'setId',
        'integration' => 'setIntegration',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'total_transactions' => 'setTotalTransactions',
        'total_transaction_value' => 'setTotalTransactionValue',
        'dedicated_account' => 'setDedicatedAccount',
        'dedicated_accounts' => 'setDedicatedAccounts',
        'identified' => 'setIdentified',
        'identifications' => 'setIdentifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactions' => 'getTransactions',
        'subscriptions' => 'getSubscriptions',
        'authorizations' => 'getAuthorizations',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'metadata' => 'getMetadata',
        'domain' => 'getDomain',
        'customer_code' => 'getCustomerCode',
        'risk_action' => 'getRiskAction',
        'id' => 'getId',
        'integration' => 'getIntegration',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'total_transactions' => 'getTotalTransactions',
        'total_transaction_value' => 'getTotalTransactionValue',
        'dedicated_account' => 'getDedicatedAccount',
        'dedicated_accounts' => 'getDedicatedAccounts',
        'identified' => 'getIdentified',
        'identifications' => 'getIdentifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('subscriptions', $data ?? [], null);
        $this->setIfExists('authorizations', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('customer_code', $data ?? [], null);
        $this->setIfExists('risk_action', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('total_transactions', $data ?? [], null);
        $this->setIfExists('total_transaction_value', $data ?? [], null);
        $this->setIfExists('dedicated_account', $data ?? [], null);
        $this->setIfExists('dedicated_accounts', $data ?? [], null);
        $this->setIfExists('identified', $data ?? [], null);
        $this->setIfExists('identifications', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transactions'] === null) {
            $invalidProperties[] = "'transactions' can't be null";
        }
        if ($this->container['subscriptions'] === null) {
            $invalidProperties[] = "'subscriptions' can't be null";
        }
        if ($this->container['authorizations'] === null) {
            $invalidProperties[] = "'authorizations' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['customer_code'] === null) {
            $invalidProperties[] = "'customer_code' can't be null";
        }
        if ($this->container['risk_action'] === null) {
            $invalidProperties[] = "'risk_action' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['total_transactions'] === null) {
            $invalidProperties[] = "'total_transactions' can't be null";
        }
        if ($this->container['total_transaction_value'] === null) {
            $invalidProperties[] = "'total_transaction_value' can't be null";
        }
        if ($this->container['dedicated_account'] === null) {
            $invalidProperties[] = "'dedicated_account' can't be null";
        }
        if ($this->container['dedicated_accounts'] === null) {
            $invalidProperties[] = "'dedicated_accounts' can't be null";
        }
        if ($this->container['identified'] === null) {
            $invalidProperties[] = "'identified' can't be null";
        }
        if ($this->container['identifications'] === null) {
            $invalidProperties[] = "'identifications' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactions
     *
     * @return mixed[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param mixed[] $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return mixed[]
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param mixed[] $subscriptions subscriptions
     *
     * @return self
     */
    public function setSubscriptions($subscriptions)
    {
        if (is_null($subscriptions)) {
            throw new \InvalidArgumentException('non-nullable subscriptions cannot be null');
        }
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets authorizations
     *
     * @return mixed[]
     */
    public function getAuthorizations()
    {
        return $this->container['authorizations'];
    }

    /**
     * Sets authorizations
     *
     * @param mixed[] $authorizations authorizations
     *
     * @return self
     */
    public function setAuthorizations($authorizations)
    {
        if (is_null($authorizations)) {
            throw new \InvalidArgumentException('non-nullable authorizations cannot be null');
        }
        $this->container['authorizations'] = $authorizations;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\CustomerCreateResponseDataMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\CustomerCreateResponseDataMetadata $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code customer_code
     *
     * @return self
     */
    public function setCustomerCode($customer_code)
    {
        if (is_null($customer_code)) {
            throw new \InvalidArgumentException('non-nullable customer_code cannot be null');
        }
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets risk_action
     *
     * @return string
     */
    public function getRiskAction()
    {
        return $this->container['risk_action'];
    }

    /**
     * Sets risk_action
     *
     * @param string $risk_action risk_action
     *
     * @return self
     */
    public function setRiskAction($risk_action)
    {
        if (is_null($risk_action)) {
            throw new \InvalidArgumentException('non-nullable risk_action cannot be null');
        }
        $this->container['risk_action'] = $risk_action;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return int
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param int $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets total_transactions
     *
     * @return int
     */
    public function getTotalTransactions()
    {
        return $this->container['total_transactions'];
    }

    /**
     * Sets total_transactions
     *
     * @param int $total_transactions total_transactions
     *
     * @return self
     */
    public function setTotalTransactions($total_transactions)
    {
        if (is_null($total_transactions)) {
            throw new \InvalidArgumentException('non-nullable total_transactions cannot be null');
        }
        $this->container['total_transactions'] = $total_transactions;

        return $this;
    }

    /**
     * Gets total_transaction_value
     *
     * @return mixed[]
     */
    public function getTotalTransactionValue()
    {
        return $this->container['total_transaction_value'];
    }

    /**
     * Sets total_transaction_value
     *
     * @param mixed[] $total_transaction_value total_transaction_value
     *
     * @return self
     */
    public function setTotalTransactionValue($total_transaction_value)
    {
        if (is_null($total_transaction_value)) {
            throw new \InvalidArgumentException('non-nullable total_transaction_value cannot be null');
        }
        $this->container['total_transaction_value'] = $total_transaction_value;

        return $this;
    }

    /**
     * Gets dedicated_account
     *
     * @return mixed
     */
    public function getDedicatedAccount()
    {
        return $this->container['dedicated_account'];
    }

    /**
     * Sets dedicated_account
     *
     * @param mixed $dedicated_account dedicated_account
     *
     * @return self
     */
    public function setDedicatedAccount($dedicated_account)
    {
        if (is_null($dedicated_account)) {
            array_push($this->openAPINullablesSetToNull, 'dedicated_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dedicated_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dedicated_account'] = $dedicated_account;

        return $this;
    }

    /**
     * Gets dedicated_accounts
     *
     * @return mixed[]
     */
    public function getDedicatedAccounts()
    {
        return $this->container['dedicated_accounts'];
    }

    /**
     * Sets dedicated_accounts
     *
     * @param mixed[] $dedicated_accounts dedicated_accounts
     *
     * @return self
     */
    public function setDedicatedAccounts($dedicated_accounts)
    {
        if (is_null($dedicated_accounts)) {
            array_push($this->openAPINullablesSetToNull, 'dedicated_accounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dedicated_accounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dedicated_accounts'] = $dedicated_accounts;

        return $this;
    }

    /**
     * Gets identified
     *
     * @return bool
     */
    public function getIdentified()
    {
        return $this->container['identified'];
    }

    /**
     * Sets identified
     *
     * @param bool $identified identified
     *
     * @return self
     */
    public function setIdentified($identified)
    {
        if (is_null($identified)) {
            throw new \InvalidArgumentException('non-nullable identified cannot be null');
        }
        $this->container['identified'] = $identified;

        return $this;
    }

    /**
     * Gets identifications
     *
     * @return mixed
     */
    public function getIdentifications()
    {
        return $this->container['identifications'];
    }

    /**
     * Sets identifications
     *
     * @param mixed $identifications identifications
     *
     * @return self
     */
    public function setIdentifications($identifications)
    {
        if (is_null($identifications)) {
            array_push($this->openAPINullablesSetToNull, 'identifications');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('identifications', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['identifications'] = $identifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


