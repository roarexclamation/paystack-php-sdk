<?php
/**
 * OrderFetchProductResponseArray
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderFetchProductResponseArray Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderFetchProductResponseArray implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderFetchProductResponseArray';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'int',
        'transaction' => 'int',
        'order_code' => 'string',
        'customer' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'customer_name' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'product_code' => 'string',
        'product_id' => 'int',
        'product_name' => 'string',
        'price' => 'int',
        'quantity_sold' => 'int',
        'currency' => 'string',
        'quantity' => 'int',
        'variant_id' => 'mixed',
        'variant_price' => 'mixed',
        'variant_code' => 'mixed',
        'amount' => 'int',
        'shipping_method' => 'mixed',
        'status' => 'string',
        'shipping_address' => 'mixed',
        'refunded' => 'bool',
        'shipping' => 'mixed',
        'paid_at' => 'string',
        'created_at' => 'string',
        'is_shipped' => 'bool',
        'is_viewed' => 'int',
        'delivery_note' => 'mixed',
        'shipping_fee' => 'mixed',
        'amount_paid' => 'int',
        'storefront_slug' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'transaction' => null,
        'order_code' => null,
        'customer' => null,
        'first_name' => null,
        'last_name' => null,
        'customer_name' => null,
        'phone' => null,
        'email' => null,
        'product_code' => null,
        'product_id' => null,
        'product_name' => null,
        'price' => null,
        'quantity_sold' => null,
        'currency' => null,
        'quantity' => null,
        'variant_id' => null,
        'variant_price' => null,
        'variant_code' => null,
        'amount' => null,
        'shipping_method' => null,
        'status' => null,
        'shipping_address' => null,
        'refunded' => null,
        'shipping' => null,
        'paid_at' => null,
        'created_at' => null,
        'is_shipped' => null,
        'is_viewed' => null,
        'delivery_note' => null,
        'shipping_fee' => null,
        'amount_paid' => null,
        'storefront_slug' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
        'transaction' => false,
        'order_code' => false,
        'customer' => false,
        'first_name' => false,
        'last_name' => false,
        'customer_name' => false,
        'phone' => false,
        'email' => false,
        'product_code' => false,
        'product_id' => false,
        'product_name' => false,
        'price' => false,
        'quantity_sold' => false,
        'currency' => false,
        'quantity' => false,
        'variant_id' => true,
        'variant_price' => true,
        'variant_code' => true,
        'amount' => false,
        'shipping_method' => true,
        'status' => false,
        'shipping_address' => true,
        'refunded' => false,
        'shipping' => true,
        'paid_at' => false,
        'created_at' => false,
        'is_shipped' => false,
        'is_viewed' => false,
        'delivery_note' => true,
        'shipping_fee' => true,
        'amount_paid' => false,
        'storefront_slug' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'transaction' => 'transaction',
        'order_code' => 'order_code',
        'customer' => 'customer',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'customer_name' => 'customer_name',
        'phone' => 'phone',
        'email' => 'email',
        'product_code' => 'product_code',
        'product_id' => 'product_id',
        'product_name' => 'product_name',
        'price' => 'price',
        'quantity_sold' => 'quantity_sold',
        'currency' => 'currency',
        'quantity' => 'quantity',
        'variant_id' => 'variant_id',
        'variant_price' => 'variant_price',
        'variant_code' => 'variant_code',
        'amount' => 'amount',
        'shipping_method' => 'shipping_method',
        'status' => 'status',
        'shipping_address' => 'shipping_address',
        'refunded' => 'refunded',
        'shipping' => 'shipping',
        'paid_at' => 'paid_at',
        'created_at' => 'created_at',
        'is_shipped' => 'is_shipped',
        'is_viewed' => 'is_viewed',
        'delivery_note' => 'delivery_note',
        'shipping_fee' => 'shipping_fee',
        'amount_paid' => 'amount_paid',
        'storefront_slug' => 'storefront_slug'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'transaction' => 'setTransaction',
        'order_code' => 'setOrderCode',
        'customer' => 'setCustomer',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'customer_name' => 'setCustomerName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'product_code' => 'setProductCode',
        'product_id' => 'setProductId',
        'product_name' => 'setProductName',
        'price' => 'setPrice',
        'quantity_sold' => 'setQuantitySold',
        'currency' => 'setCurrency',
        'quantity' => 'setQuantity',
        'variant_id' => 'setVariantId',
        'variant_price' => 'setVariantPrice',
        'variant_code' => 'setVariantCode',
        'amount' => 'setAmount',
        'shipping_method' => 'setShippingMethod',
        'status' => 'setStatus',
        'shipping_address' => 'setShippingAddress',
        'refunded' => 'setRefunded',
        'shipping' => 'setShipping',
        'paid_at' => 'setPaidAt',
        'created_at' => 'setCreatedAt',
        'is_shipped' => 'setIsShipped',
        'is_viewed' => 'setIsViewed',
        'delivery_note' => 'setDeliveryNote',
        'shipping_fee' => 'setShippingFee',
        'amount_paid' => 'setAmountPaid',
        'storefront_slug' => 'setStorefrontSlug'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'transaction' => 'getTransaction',
        'order_code' => 'getOrderCode',
        'customer' => 'getCustomer',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'customer_name' => 'getCustomerName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'product_code' => 'getProductCode',
        'product_id' => 'getProductId',
        'product_name' => 'getProductName',
        'price' => 'getPrice',
        'quantity_sold' => 'getQuantitySold',
        'currency' => 'getCurrency',
        'quantity' => 'getQuantity',
        'variant_id' => 'getVariantId',
        'variant_price' => 'getVariantPrice',
        'variant_code' => 'getVariantCode',
        'amount' => 'getAmount',
        'shipping_method' => 'getShippingMethod',
        'status' => 'getStatus',
        'shipping_address' => 'getShippingAddress',
        'refunded' => 'getRefunded',
        'shipping' => 'getShipping',
        'paid_at' => 'getPaidAt',
        'created_at' => 'getCreatedAt',
        'is_shipped' => 'getIsShipped',
        'is_viewed' => 'getIsViewed',
        'delivery_note' => 'getDeliveryNote',
        'shipping_fee' => 'getShippingFee',
        'amount_paid' => 'getAmountPaid',
        'storefront_slug' => 'getStorefrontSlug'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('order_code', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('quantity_sold', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('variant_id', $data ?? [], null);
        $this->setIfExists('variant_price', $data ?? [], null);
        $this->setIfExists('variant_code', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('refunded', $data ?? [], null);
        $this->setIfExists('shipping', $data ?? [], null);
        $this->setIfExists('paid_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('is_shipped', $data ?? [], null);
        $this->setIfExists('is_viewed', $data ?? [], null);
        $this->setIfExists('delivery_note', $data ?? [], null);
        $this->setIfExists('shipping_fee', $data ?? [], null);
        $this->setIfExists('amount_paid', $data ?? [], null);
        $this->setIfExists('storefront_slug', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['transaction'] === null) {
            $invalidProperties[] = "'transaction' can't be null";
        }
        if ($this->container['order_code'] === null) {
            $invalidProperties[] = "'order_code' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['customer_name'] === null) {
            $invalidProperties[] = "'customer_name' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['product_name'] === null) {
            $invalidProperties[] = "'product_name' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['quantity_sold'] === null) {
            $invalidProperties[] = "'quantity_sold' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['variant_id'] === null) {
            $invalidProperties[] = "'variant_id' can't be null";
        }
        if ($this->container['variant_price'] === null) {
            $invalidProperties[] = "'variant_price' can't be null";
        }
        if ($this->container['variant_code'] === null) {
            $invalidProperties[] = "'variant_code' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['shipping_method'] === null) {
            $invalidProperties[] = "'shipping_method' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['shipping_address'] === null) {
            $invalidProperties[] = "'shipping_address' can't be null";
        }
        if ($this->container['refunded'] === null) {
            $invalidProperties[] = "'refunded' can't be null";
        }
        if ($this->container['shipping'] === null) {
            $invalidProperties[] = "'shipping' can't be null";
        }
        if ($this->container['paid_at'] === null) {
            $invalidProperties[] = "'paid_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['is_shipped'] === null) {
            $invalidProperties[] = "'is_shipped' can't be null";
        }
        if ($this->container['is_viewed'] === null) {
            $invalidProperties[] = "'is_viewed' can't be null";
        }
        if ($this->container['delivery_note'] === null) {
            $invalidProperties[] = "'delivery_note' can't be null";
        }
        if ($this->container['shipping_fee'] === null) {
            $invalidProperties[] = "'shipping_fee' can't be null";
        }
        if ($this->container['amount_paid'] === null) {
            $invalidProperties[] = "'amount_paid' can't be null";
        }
        if ($this->container['storefront_slug'] === null) {
            $invalidProperties[] = "'storefront_slug' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return int
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param int $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets order_code
     *
     * @return string
     */
    public function getOrderCode()
    {
        return $this->container['order_code'];
    }

    /**
     * Sets order_code
     *
     * @param string $order_code order_code
     *
     * @return self
     */
    public function setOrderCode($order_code)
    {
        if (is_null($order_code)) {
            throw new \InvalidArgumentException('non-nullable order_code cannot be null');
        }
        $this->container['order_code'] = $order_code;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return int
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param int $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code product_code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity_sold
     *
     * @return int
     */
    public function getQuantitySold()
    {
        return $this->container['quantity_sold'];
    }

    /**
     * Sets quantity_sold
     *
     * @param int $quantity_sold quantity_sold
     *
     * @return self
     */
    public function setQuantitySold($quantity_sold)
    {
        if (is_null($quantity_sold)) {
            throw new \InvalidArgumentException('non-nullable quantity_sold cannot be null');
        }
        $this->container['quantity_sold'] = $quantity_sold;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets variant_id
     *
     * @return mixed
     */
    public function getVariantId()
    {
        return $this->container['variant_id'];
    }

    /**
     * Sets variant_id
     *
     * @param mixed $variant_id variant_id
     *
     * @return self
     */
    public function setVariantId($variant_id)
    {
        if (is_null($variant_id)) {
            array_push($this->openAPINullablesSetToNull, 'variant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variant_id'] = $variant_id;

        return $this;
    }

    /**
     * Gets variant_price
     *
     * @return mixed
     */
    public function getVariantPrice()
    {
        return $this->container['variant_price'];
    }

    /**
     * Sets variant_price
     *
     * @param mixed $variant_price variant_price
     *
     * @return self
     */
    public function setVariantPrice($variant_price)
    {
        if (is_null($variant_price)) {
            array_push($this->openAPINullablesSetToNull, 'variant_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variant_price'] = $variant_price;

        return $this;
    }

    /**
     * Gets variant_code
     *
     * @return mixed
     */
    public function getVariantCode()
    {
        return $this->container['variant_code'];
    }

    /**
     * Sets variant_code
     *
     * @param mixed $variant_code variant_code
     *
     * @return self
     */
    public function setVariantCode($variant_code)
    {
        if (is_null($variant_code)) {
            array_push($this->openAPINullablesSetToNull, 'variant_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variant_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variant_code'] = $variant_code;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return mixed
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param mixed $shipping_method shipping_method
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        if (is_null($shipping_method)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return mixed
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param mixed $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return bool
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param bool $refunded refunded
     *
     * @return self
     */
    public function setRefunded($refunded)
    {
        if (is_null($refunded)) {
            throw new \InvalidArgumentException('non-nullable refunded cannot be null');
        }
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return mixed
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param mixed $shipping shipping
     *
     * @return self
     */
    public function setShipping($shipping)
    {
        if (is_null($shipping)) {
            array_push($this->openAPINullablesSetToNull, 'shipping');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets paid_at
     *
     * @return string
     */
    public function getPaidAt()
    {
        return $this->container['paid_at'];
    }

    /**
     * Sets paid_at
     *
     * @param string $paid_at paid_at
     *
     * @return self
     */
    public function setPaidAt($paid_at)
    {
        if (is_null($paid_at)) {
            throw new \InvalidArgumentException('non-nullable paid_at cannot be null');
        }
        $this->container['paid_at'] = $paid_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets is_shipped
     *
     * @return bool
     */
    public function getIsShipped()
    {
        return $this->container['is_shipped'];
    }

    /**
     * Sets is_shipped
     *
     * @param bool $is_shipped is_shipped
     *
     * @return self
     */
    public function setIsShipped($is_shipped)
    {
        if (is_null($is_shipped)) {
            throw new \InvalidArgumentException('non-nullable is_shipped cannot be null');
        }
        $this->container['is_shipped'] = $is_shipped;

        return $this;
    }

    /**
     * Gets is_viewed
     *
     * @return int
     */
    public function getIsViewed()
    {
        return $this->container['is_viewed'];
    }

    /**
     * Sets is_viewed
     *
     * @param int $is_viewed is_viewed
     *
     * @return self
     */
    public function setIsViewed($is_viewed)
    {
        if (is_null($is_viewed)) {
            throw new \InvalidArgumentException('non-nullable is_viewed cannot be null');
        }
        $this->container['is_viewed'] = $is_viewed;

        return $this;
    }

    /**
     * Gets delivery_note
     *
     * @return mixed
     */
    public function getDeliveryNote()
    {
        return $this->container['delivery_note'];
    }

    /**
     * Sets delivery_note
     *
     * @param mixed $delivery_note delivery_note
     *
     * @return self
     */
    public function setDeliveryNote($delivery_note)
    {
        if (is_null($delivery_note)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_note'] = $delivery_note;

        return $this;
    }

    /**
     * Gets shipping_fee
     *
     * @return mixed
     */
    public function getShippingFee()
    {
        return $this->container['shipping_fee'];
    }

    /**
     * Sets shipping_fee
     *
     * @param mixed $shipping_fee shipping_fee
     *
     * @return self
     */
    public function setShippingFee($shipping_fee)
    {
        if (is_null($shipping_fee)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_fee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_fee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_fee'] = $shipping_fee;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return int
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param int $amount_paid amount_paid
     *
     * @return self
     */
    public function setAmountPaid($amount_paid)
    {
        if (is_null($amount_paid)) {
            throw new \InvalidArgumentException('non-nullable amount_paid cannot be null');
        }
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets storefront_slug
     *
     * @return string
     */
    public function getStorefrontSlug()
    {
        return $this->container['storefront_slug'];
    }

    /**
     * Sets storefront_slug
     *
     * @param string $storefront_slug storefront_slug
     *
     * @return self
     */
    public function setStorefrontSlug($storefront_slug)
    {
        if (is_null($storefront_slug)) {
            throw new \InvalidArgumentException('non-nullable storefront_slug cannot be null');
        }
        $this->container['storefront_slug'] = $storefront_slug;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


