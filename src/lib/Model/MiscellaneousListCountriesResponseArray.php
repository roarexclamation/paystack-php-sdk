<?php
/**
 * MiscellaneousListCountriesResponseArray
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MiscellaneousListCountriesResponseArray Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MiscellaneousListCountriesResponseArray implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MiscellaneousListCountriesResponseArray';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'active_for_dashboard_onboarding' => 'bool',
        'name' => 'string',
        'iso_code' => 'string',
        'default_currency_code' => 'string',
        'integration_defaults' => 'object',
        'calling_code' => 'string',
        'pilot_mode' => 'bool',
        'relationships' => '\OpenAPI\Client\Model\MiscellaneousListCountriesResponseArrayRelationships'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'active_for_dashboard_onboarding' => null,
        'name' => null,
        'iso_code' => null,
        'default_currency_code' => null,
        'integration_defaults' => null,
        'calling_code' => null,
        'pilot_mode' => null,
        'relationships' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'active_for_dashboard_onboarding' => false,
        'name' => false,
        'iso_code' => false,
        'default_currency_code' => false,
        'integration_defaults' => false,
        'calling_code' => false,
        'pilot_mode' => false,
        'relationships' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'active_for_dashboard_onboarding' => 'active_for_dashboard_onboarding',
        'name' => 'name',
        'iso_code' => 'iso_code',
        'default_currency_code' => 'default_currency_code',
        'integration_defaults' => 'integration_defaults',
        'calling_code' => 'calling_code',
        'pilot_mode' => 'pilot_mode',
        'relationships' => 'relationships'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'active_for_dashboard_onboarding' => 'setActiveForDashboardOnboarding',
        'name' => 'setName',
        'iso_code' => 'setIsoCode',
        'default_currency_code' => 'setDefaultCurrencyCode',
        'integration_defaults' => 'setIntegrationDefaults',
        'calling_code' => 'setCallingCode',
        'pilot_mode' => 'setPilotMode',
        'relationships' => 'setRelationships'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'active_for_dashboard_onboarding' => 'getActiveForDashboardOnboarding',
        'name' => 'getName',
        'iso_code' => 'getIsoCode',
        'default_currency_code' => 'getDefaultCurrencyCode',
        'integration_defaults' => 'getIntegrationDefaults',
        'calling_code' => 'getCallingCode',
        'pilot_mode' => 'getPilotMode',
        'relationships' => 'getRelationships'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('active_for_dashboard_onboarding', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('iso_code', $data ?? [], null);
        $this->setIfExists('default_currency_code', $data ?? [], null);
        $this->setIfExists('integration_defaults', $data ?? [], null);
        $this->setIfExists('calling_code', $data ?? [], null);
        $this->setIfExists('pilot_mode', $data ?? [], null);
        $this->setIfExists('relationships', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['active_for_dashboard_onboarding'] === null) {
            $invalidProperties[] = "'active_for_dashboard_onboarding' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['iso_code'] === null) {
            $invalidProperties[] = "'iso_code' can't be null";
        }
        if ($this->container['default_currency_code'] === null) {
            $invalidProperties[] = "'default_currency_code' can't be null";
        }
        if ($this->container['integration_defaults'] === null) {
            $invalidProperties[] = "'integration_defaults' can't be null";
        }
        if ($this->container['calling_code'] === null) {
            $invalidProperties[] = "'calling_code' can't be null";
        }
        if ($this->container['pilot_mode'] === null) {
            $invalidProperties[] = "'pilot_mode' can't be null";
        }
        if ($this->container['relationships'] === null) {
            $invalidProperties[] = "'relationships' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets active_for_dashboard_onboarding
     *
     * @return bool
     */
    public function getActiveForDashboardOnboarding()
    {
        return $this->container['active_for_dashboard_onboarding'];
    }

    /**
     * Sets active_for_dashboard_onboarding
     *
     * @param bool $active_for_dashboard_onboarding active_for_dashboard_onboarding
     *
     * @return self
     */
    public function setActiveForDashboardOnboarding($active_for_dashboard_onboarding)
    {
        if (is_null($active_for_dashboard_onboarding)) {
            throw new \InvalidArgumentException('non-nullable active_for_dashboard_onboarding cannot be null');
        }
        $this->container['active_for_dashboard_onboarding'] = $active_for_dashboard_onboarding;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets iso_code
     *
     * @return string
     */
    public function getIsoCode()
    {
        return $this->container['iso_code'];
    }

    /**
     * Sets iso_code
     *
     * @param string $iso_code iso_code
     *
     * @return self
     */
    public function setIsoCode($iso_code)
    {
        if (is_null($iso_code)) {
            throw new \InvalidArgumentException('non-nullable iso_code cannot be null');
        }
        $this->container['iso_code'] = $iso_code;

        return $this;
    }

    /**
     * Gets default_currency_code
     *
     * @return string
     */
    public function getDefaultCurrencyCode()
    {
        return $this->container['default_currency_code'];
    }

    /**
     * Sets default_currency_code
     *
     * @param string $default_currency_code default_currency_code
     *
     * @return self
     */
    public function setDefaultCurrencyCode($default_currency_code)
    {
        if (is_null($default_currency_code)) {
            throw new \InvalidArgumentException('non-nullable default_currency_code cannot be null');
        }
        $this->container['default_currency_code'] = $default_currency_code;

        return $this;
    }

    /**
     * Gets integration_defaults
     *
     * @return object
     */
    public function getIntegrationDefaults()
    {
        return $this->container['integration_defaults'];
    }

    /**
     * Sets integration_defaults
     *
     * @param object $integration_defaults integration_defaults
     *
     * @return self
     */
    public function setIntegrationDefaults($integration_defaults)
    {
        if (is_null($integration_defaults)) {
            throw new \InvalidArgumentException('non-nullable integration_defaults cannot be null');
        }
        $this->container['integration_defaults'] = $integration_defaults;

        return $this;
    }

    /**
     * Gets calling_code
     *
     * @return string
     */
    public function getCallingCode()
    {
        return $this->container['calling_code'];
    }

    /**
     * Sets calling_code
     *
     * @param string $calling_code calling_code
     *
     * @return self
     */
    public function setCallingCode($calling_code)
    {
        if (is_null($calling_code)) {
            throw new \InvalidArgumentException('non-nullable calling_code cannot be null');
        }
        $this->container['calling_code'] = $calling_code;

        return $this;
    }

    /**
     * Gets pilot_mode
     *
     * @return bool
     */
    public function getPilotMode()
    {
        return $this->container['pilot_mode'];
    }

    /**
     * Sets pilot_mode
     *
     * @param bool $pilot_mode pilot_mode
     *
     * @return self
     */
    public function setPilotMode($pilot_mode)
    {
        if (is_null($pilot_mode)) {
            throw new \InvalidArgumentException('non-nullable pilot_mode cannot be null');
        }
        $this->container['pilot_mode'] = $pilot_mode;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \OpenAPI\Client\Model\MiscellaneousListCountriesResponseArrayRelationships
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \OpenAPI\Client\Model\MiscellaneousListCountriesResponseArrayRelationships $relationships relationships
     *
     * @return self
     */
    public function setRelationships($relationships)
    {
        if (is_null($relationships)) {
            throw new \InvalidArgumentException('non-nullable relationships cannot be null');
        }
        $this->container['relationships'] = $relationships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


