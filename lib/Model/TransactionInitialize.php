<?php
/**
 * TransactionInitialize
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionInitialize Class Doc Comment
 *
 * @category Class
 * @description Initialize a transaction
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionInitialize implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionInitialize';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'amount' => 'int',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'reference' => 'string',
        'channels' => 'string[]',
        'callback_url' => 'string',
        'plan' => 'string',
        'invoice_limit' => 'int',
        'split_code' => 'string',
        'split' => '\OpenAPI\Client\Model\SplitCreate',
        'subaccount' => 'string',
        'transaction_charge' => 'string',
        'bearer' => 'string',
        'label' => 'string',
        'metadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'amount' => null,
        'currency' => null,
        'reference' => null,
        'channels' => null,
        'callback_url' => null,
        'plan' => null,
        'invoice_limit' => null,
        'split_code' => null,
        'split' => null,
        'subaccount' => null,
        'transaction_charge' => null,
        'bearer' => null,
        'label' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'email' => false,
        'amount' => false,
        'currency' => false,
        'reference' => false,
        'channels' => false,
        'callback_url' => false,
        'plan' => false,
        'invoice_limit' => false,
        'split_code' => false,
        'split' => false,
        'subaccount' => false,
        'transaction_charge' => false,
        'bearer' => false,
        'label' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'amount' => 'amount',
        'currency' => 'currency',
        'reference' => 'reference',
        'channels' => 'channels',
        'callback_url' => 'callback_url',
        'plan' => 'plan',
        'invoice_limit' => 'invoice_limit',
        'split_code' => 'split_code',
        'split' => 'split',
        'subaccount' => 'subaccount',
        'transaction_charge' => 'transaction_charge',
        'bearer' => 'bearer',
        'label' => 'label',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'reference' => 'setReference',
        'channels' => 'setChannels',
        'callback_url' => 'setCallbackUrl',
        'plan' => 'setPlan',
        'invoice_limit' => 'setInvoiceLimit',
        'split_code' => 'setSplitCode',
        'split' => 'setSplit',
        'subaccount' => 'setSubaccount',
        'transaction_charge' => 'setTransactionCharge',
        'bearer' => 'setBearer',
        'label' => 'setLabel',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'reference' => 'getReference',
        'channels' => 'getChannels',
        'callback_url' => 'getCallbackUrl',
        'plan' => 'getPlan',
        'invoice_limit' => 'getInvoiceLimit',
        'split_code' => 'getSplitCode',
        'split' => 'getSplit',
        'subaccount' => 'getSubaccount',
        'transaction_charge' => 'getTransactionCharge',
        'bearer' => 'getBearer',
        'label' => 'getLabel',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNELS_CARD = 'card';
    public const CHANNELS_BANK = 'bank';
    public const CHANNELS_USSD = 'ussd';
    public const CHANNELS_QR = 'qr';
    public const CHANNELS_EFT = 'eft';
    public const CHANNELS_MOBILE_MONEY = 'mobile_money';
    public const CHANNELS_BANK_TRANSFER = 'bank_transfer';
    public const BEARER_ACCOUNT = 'account';
    public const BEARER_SUBACCOUNT = 'subaccount';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelsAllowableValues()
    {
        return [
            self::CHANNELS_CARD,
            self::CHANNELS_BANK,
            self::CHANNELS_USSD,
            self::CHANNELS_QR,
            self::CHANNELS_EFT,
            self::CHANNELS_MOBILE_MONEY,
            self::CHANNELS_BANK_TRANSFER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBearerAllowableValues()
    {
        return [
            self::BEARER_ACCOUNT,
            self::BEARER_SUBACCOUNT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('invoice_limit', $data ?? [], null);
        $this->setIfExists('split_code', $data ?? [], null);
        $this->setIfExists('split', $data ?? [], null);
        $this->setIfExists('subaccount', $data ?? [], null);
        $this->setIfExists('transaction_charge', $data ?? [], null);
        $this->setIfExists('bearer', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        $allowedValues = $this->getBearerAllowableValues();
        if (!is_null($this->container['bearer']) && !in_array($this->container['bearer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bearer', must be one of '%s'",
                $this->container['bearer'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Customer's email address
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Amount should be in smallest denomination of the currency. For example if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Unique transaction reference. Only -, ., = and alphanumeric characters allowed.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels An array of payment channels to control what channels you want to make available to the user to make a payment with
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $allowedValues = $this->getChannelsAllowableValues();
        if (array_diff($channels, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channels', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url Fully qualified url, e.g. https://example.com/ to redirect your customers to after a successful payment. Use this to override the callback url provided on the dashboard for this transaction
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            throw new \InvalidArgumentException('non-nullable callback_url cannot be null');
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return string|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param string|null $plan If transaction is to create a subscription to a predefined plan, provide plan code here.  This would invalidate the value provided in amount
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets invoice_limit
     *
     * @return int|null
     */
    public function getInvoiceLimit()
    {
        return $this->container['invoice_limit'];
    }

    /**
     * Sets invoice_limit
     *
     * @param int|null $invoice_limit Number of times to charge customer during subscription to plan
     *
     * @return self
     */
    public function setInvoiceLimit($invoice_limit)
    {
        if (is_null($invoice_limit)) {
            throw new \InvalidArgumentException('non-nullable invoice_limit cannot be null');
        }
        $this->container['invoice_limit'] = $invoice_limit;

        return $this;
    }

    /**
     * Gets split_code
     *
     * @return string|null
     */
    public function getSplitCode()
    {
        return $this->container['split_code'];
    }

    /**
     * Sets split_code
     *
     * @param string|null $split_code The split code of the transaction split
     *
     * @return self
     */
    public function setSplitCode($split_code)
    {
        if (is_null($split_code)) {
            throw new \InvalidArgumentException('non-nullable split_code cannot be null');
        }
        $this->container['split_code'] = $split_code;

        return $this;
    }

    /**
     * Gets split
     *
     * @return \OpenAPI\Client\Model\SplitCreate|null
     */
    public function getSplit()
    {
        return $this->container['split'];
    }

    /**
     * Sets split
     *
     * @param \OpenAPI\Client\Model\SplitCreate|null $split split
     *
     * @return self
     */
    public function setSplit($split)
    {
        if (is_null($split)) {
            throw new \InvalidArgumentException('non-nullable split cannot be null');
        }
        $this->container['split'] = $split;

        return $this;
    }

    /**
     * Gets subaccount
     *
     * @return string|null
     */
    public function getSubaccount()
    {
        return $this->container['subaccount'];
    }

    /**
     * Sets subaccount
     *
     * @param string|null $subaccount The code for the subaccount that owns the payment
     *
     * @return self
     */
    public function setSubaccount($subaccount)
    {
        if (is_null($subaccount)) {
            throw new \InvalidArgumentException('non-nullable subaccount cannot be null');
        }
        $this->container['subaccount'] = $subaccount;

        return $this;
    }

    /**
     * Gets transaction_charge
     *
     * @return string|null
     */
    public function getTransactionCharge()
    {
        return $this->container['transaction_charge'];
    }

    /**
     * Sets transaction_charge
     *
     * @param string|null $transaction_charge A flat fee to charge the subaccount for a transaction.  This overrides the split percentage set when the subaccount was created
     *
     * @return self
     */
    public function setTransactionCharge($transaction_charge)
    {
        if (is_null($transaction_charge)) {
            throw new \InvalidArgumentException('non-nullable transaction_charge cannot be null');
        }
        $this->container['transaction_charge'] = $transaction_charge;

        return $this;
    }

    /**
     * Gets bearer
     *
     * @return string|null
     */
    public function getBearer()
    {
        return $this->container['bearer'];
    }

    /**
     * Sets bearer
     *
     * @param string|null $bearer The bearer of the transaction charge
     *
     * @return self
     */
    public function setBearer($bearer)
    {
        if (is_null($bearer)) {
            throw new \InvalidArgumentException('non-nullable bearer cannot be null');
        }
        $allowedValues = $this->getBearerAllowableValues();
        if (!in_array($bearer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bearer', must be one of '%s'",
                    $bearer,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bearer'] = $bearer;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Used to replace the email address shown on the Checkout
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Stringified JSON object of custom data
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


