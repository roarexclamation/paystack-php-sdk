<?php
/**
 * PlanListResponseArray
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlanListResponseArray Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlanListResponseArray implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlanListResponseArray';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subscriptions' => 'mixed[]',
        'pages' => 'mixed[]',
        'domain' => 'string',
        'name' => 'string',
        'plan_code' => 'string',
        'description' => 'mixed',
        'amount' => 'int',
        'interval' => 'string',
        'invoice_limit' => 'int',
        'send_invoices' => 'bool',
        'send_sms' => 'bool',
        'hosted_page' => 'bool',
        'hosted_page_url' => 'mixed',
        'hosted_page_summary' => 'mixed',
        'currency' => 'string',
        'migrate' => 'bool',
        'is_deleted' => 'bool',
        'is_archived' => 'bool',
        'id' => 'int',
        'integration' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string',
        'total_subscriptions' => 'int',
        'active_subscriptions' => 'int',
        'total_subscriptions_revenue' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subscriptions' => null,
        'pages' => null,
        'domain' => null,
        'name' => null,
        'plan_code' => null,
        'description' => null,
        'amount' => null,
        'interval' => null,
        'invoice_limit' => null,
        'send_invoices' => null,
        'send_sms' => null,
        'hosted_page' => null,
        'hosted_page_url' => null,
        'hosted_page_summary' => null,
        'currency' => null,
        'migrate' => null,
        'is_deleted' => null,
        'is_archived' => null,
        'id' => null,
        'integration' => null,
        'created_at' => null,
        'updated_at' => null,
        'total_subscriptions' => null,
        'active_subscriptions' => null,
        'total_subscriptions_revenue' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subscriptions' => false,
        'pages' => false,
        'domain' => false,
        'name' => false,
        'plan_code' => false,
        'description' => true,
        'amount' => false,
        'interval' => false,
        'invoice_limit' => false,
        'send_invoices' => false,
        'send_sms' => false,
        'hosted_page' => false,
        'hosted_page_url' => true,
        'hosted_page_summary' => true,
        'currency' => false,
        'migrate' => false,
        'is_deleted' => false,
        'is_archived' => false,
        'id' => false,
        'integration' => false,
        'created_at' => false,
        'updated_at' => false,
        'total_subscriptions' => false,
        'active_subscriptions' => false,
        'total_subscriptions_revenue' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscriptions' => 'subscriptions',
        'pages' => 'pages',
        'domain' => 'domain',
        'name' => 'name',
        'plan_code' => 'plan_code',
        'description' => 'description',
        'amount' => 'amount',
        'interval' => 'interval',
        'invoice_limit' => 'invoice_limit',
        'send_invoices' => 'send_invoices',
        'send_sms' => 'send_sms',
        'hosted_page' => 'hosted_page',
        'hosted_page_url' => 'hosted_page_url',
        'hosted_page_summary' => 'hosted_page_summary',
        'currency' => 'currency',
        'migrate' => 'migrate',
        'is_deleted' => 'is_deleted',
        'is_archived' => 'is_archived',
        'id' => 'id',
        'integration' => 'integration',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'total_subscriptions' => 'total_subscriptions',
        'active_subscriptions' => 'active_subscriptions',
        'total_subscriptions_revenue' => 'total_subscriptions_revenue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscriptions' => 'setSubscriptions',
        'pages' => 'setPages',
        'domain' => 'setDomain',
        'name' => 'setName',
        'plan_code' => 'setPlanCode',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'interval' => 'setInterval',
        'invoice_limit' => 'setInvoiceLimit',
        'send_invoices' => 'setSendInvoices',
        'send_sms' => 'setSendSms',
        'hosted_page' => 'setHostedPage',
        'hosted_page_url' => 'setHostedPageUrl',
        'hosted_page_summary' => 'setHostedPageSummary',
        'currency' => 'setCurrency',
        'migrate' => 'setMigrate',
        'is_deleted' => 'setIsDeleted',
        'is_archived' => 'setIsArchived',
        'id' => 'setId',
        'integration' => 'setIntegration',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'total_subscriptions' => 'setTotalSubscriptions',
        'active_subscriptions' => 'setActiveSubscriptions',
        'total_subscriptions_revenue' => 'setTotalSubscriptionsRevenue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscriptions' => 'getSubscriptions',
        'pages' => 'getPages',
        'domain' => 'getDomain',
        'name' => 'getName',
        'plan_code' => 'getPlanCode',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'interval' => 'getInterval',
        'invoice_limit' => 'getInvoiceLimit',
        'send_invoices' => 'getSendInvoices',
        'send_sms' => 'getSendSms',
        'hosted_page' => 'getHostedPage',
        'hosted_page_url' => 'getHostedPageUrl',
        'hosted_page_summary' => 'getHostedPageSummary',
        'currency' => 'getCurrency',
        'migrate' => 'getMigrate',
        'is_deleted' => 'getIsDeleted',
        'is_archived' => 'getIsArchived',
        'id' => 'getId',
        'integration' => 'getIntegration',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'total_subscriptions' => 'getTotalSubscriptions',
        'active_subscriptions' => 'getActiveSubscriptions',
        'total_subscriptions_revenue' => 'getTotalSubscriptionsRevenue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subscriptions', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('plan_code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('invoice_limit', $data ?? [], null);
        $this->setIfExists('send_invoices', $data ?? [], null);
        $this->setIfExists('send_sms', $data ?? [], null);
        $this->setIfExists('hosted_page', $data ?? [], null);
        $this->setIfExists('hosted_page_url', $data ?? [], null);
        $this->setIfExists('hosted_page_summary', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('migrate', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('total_subscriptions', $data ?? [], null);
        $this->setIfExists('active_subscriptions', $data ?? [], null);
        $this->setIfExists('total_subscriptions_revenue', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subscriptions'] === null) {
            $invalidProperties[] = "'subscriptions' can't be null";
        }
        if ($this->container['pages'] === null) {
            $invalidProperties[] = "'pages' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['plan_code'] === null) {
            $invalidProperties[] = "'plan_code' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['invoice_limit'] === null) {
            $invalidProperties[] = "'invoice_limit' can't be null";
        }
        if ($this->container['send_invoices'] === null) {
            $invalidProperties[] = "'send_invoices' can't be null";
        }
        if ($this->container['send_sms'] === null) {
            $invalidProperties[] = "'send_sms' can't be null";
        }
        if ($this->container['hosted_page'] === null) {
            $invalidProperties[] = "'hosted_page' can't be null";
        }
        if ($this->container['hosted_page_url'] === null) {
            $invalidProperties[] = "'hosted_page_url' can't be null";
        }
        if ($this->container['hosted_page_summary'] === null) {
            $invalidProperties[] = "'hosted_page_summary' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['migrate'] === null) {
            $invalidProperties[] = "'migrate' can't be null";
        }
        if ($this->container['is_deleted'] === null) {
            $invalidProperties[] = "'is_deleted' can't be null";
        }
        if ($this->container['is_archived'] === null) {
            $invalidProperties[] = "'is_archived' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['total_subscriptions'] === null) {
            $invalidProperties[] = "'total_subscriptions' can't be null";
        }
        if ($this->container['active_subscriptions'] === null) {
            $invalidProperties[] = "'active_subscriptions' can't be null";
        }
        if ($this->container['total_subscriptions_revenue'] === null) {
            $invalidProperties[] = "'total_subscriptions_revenue' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscriptions
     *
     * @return mixed[]
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param mixed[] $subscriptions subscriptions
     *
     * @return self
     */
    public function setSubscriptions($subscriptions)
    {
        if (is_null($subscriptions)) {
            throw new \InvalidArgumentException('non-nullable subscriptions cannot be null');
        }
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return mixed[]
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param mixed[] $pages pages
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plan_code
     *
     * @return string
     */
    public function getPlanCode()
    {
        return $this->container['plan_code'];
    }

    /**
     * Sets plan_code
     *
     * @param string $plan_code plan_code
     *
     * @return self
     */
    public function setPlanCode($plan_code)
    {
        if (is_null($plan_code)) {
            throw new \InvalidArgumentException('non-nullable plan_code cannot be null');
        }
        $this->container['plan_code'] = $plan_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets invoice_limit
     *
     * @return int
     */
    public function getInvoiceLimit()
    {
        return $this->container['invoice_limit'];
    }

    /**
     * Sets invoice_limit
     *
     * @param int $invoice_limit invoice_limit
     *
     * @return self
     */
    public function setInvoiceLimit($invoice_limit)
    {
        if (is_null($invoice_limit)) {
            throw new \InvalidArgumentException('non-nullable invoice_limit cannot be null');
        }
        $this->container['invoice_limit'] = $invoice_limit;

        return $this;
    }

    /**
     * Gets send_invoices
     *
     * @return bool
     */
    public function getSendInvoices()
    {
        return $this->container['send_invoices'];
    }

    /**
     * Sets send_invoices
     *
     * @param bool $send_invoices send_invoices
     *
     * @return self
     */
    public function setSendInvoices($send_invoices)
    {
        if (is_null($send_invoices)) {
            throw new \InvalidArgumentException('non-nullable send_invoices cannot be null');
        }
        $this->container['send_invoices'] = $send_invoices;

        return $this;
    }

    /**
     * Gets send_sms
     *
     * @return bool
     */
    public function getSendSms()
    {
        return $this->container['send_sms'];
    }

    /**
     * Sets send_sms
     *
     * @param bool $send_sms send_sms
     *
     * @return self
     */
    public function setSendSms($send_sms)
    {
        if (is_null($send_sms)) {
            throw new \InvalidArgumentException('non-nullable send_sms cannot be null');
        }
        $this->container['send_sms'] = $send_sms;

        return $this;
    }

    /**
     * Gets hosted_page
     *
     * @return bool
     */
    public function getHostedPage()
    {
        return $this->container['hosted_page'];
    }

    /**
     * Sets hosted_page
     *
     * @param bool $hosted_page hosted_page
     *
     * @return self
     */
    public function setHostedPage($hosted_page)
    {
        if (is_null($hosted_page)) {
            throw new \InvalidArgumentException('non-nullable hosted_page cannot be null');
        }
        $this->container['hosted_page'] = $hosted_page;

        return $this;
    }

    /**
     * Gets hosted_page_url
     *
     * @return mixed
     */
    public function getHostedPageUrl()
    {
        return $this->container['hosted_page_url'];
    }

    /**
     * Sets hosted_page_url
     *
     * @param mixed $hosted_page_url hosted_page_url
     *
     * @return self
     */
    public function setHostedPageUrl($hosted_page_url)
    {
        if (is_null($hosted_page_url)) {
            array_push($this->openAPINullablesSetToNull, 'hosted_page_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hosted_page_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hosted_page_url'] = $hosted_page_url;

        return $this;
    }

    /**
     * Gets hosted_page_summary
     *
     * @return mixed
     */
    public function getHostedPageSummary()
    {
        return $this->container['hosted_page_summary'];
    }

    /**
     * Sets hosted_page_summary
     *
     * @param mixed $hosted_page_summary hosted_page_summary
     *
     * @return self
     */
    public function setHostedPageSummary($hosted_page_summary)
    {
        if (is_null($hosted_page_summary)) {
            array_push($this->openAPINullablesSetToNull, 'hosted_page_summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hosted_page_summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hosted_page_summary'] = $hosted_page_summary;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets migrate
     *
     * @return bool
     */
    public function getMigrate()
    {
        return $this->container['migrate'];
    }

    /**
     * Sets migrate
     *
     * @param bool $migrate migrate
     *
     * @return self
     */
    public function setMigrate($migrate)
    {
        if (is_null($migrate)) {
            throw new \InvalidArgumentException('non-nullable migrate cannot be null');
        }
        $this->container['migrate'] = $migrate;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {
        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }
        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return int
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param int $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets total_subscriptions
     *
     * @return int
     */
    public function getTotalSubscriptions()
    {
        return $this->container['total_subscriptions'];
    }

    /**
     * Sets total_subscriptions
     *
     * @param int $total_subscriptions total_subscriptions
     *
     * @return self
     */
    public function setTotalSubscriptions($total_subscriptions)
    {
        if (is_null($total_subscriptions)) {
            throw new \InvalidArgumentException('non-nullable total_subscriptions cannot be null');
        }
        $this->container['total_subscriptions'] = $total_subscriptions;

        return $this;
    }

    /**
     * Gets active_subscriptions
     *
     * @return int
     */
    public function getActiveSubscriptions()
    {
        return $this->container['active_subscriptions'];
    }

    /**
     * Sets active_subscriptions
     *
     * @param int $active_subscriptions active_subscriptions
     *
     * @return self
     */
    public function setActiveSubscriptions($active_subscriptions)
    {
        if (is_null($active_subscriptions)) {
            throw new \InvalidArgumentException('non-nullable active_subscriptions cannot be null');
        }
        $this->container['active_subscriptions'] = $active_subscriptions;

        return $this;
    }

    /**
     * Gets total_subscriptions_revenue
     *
     * @return int
     */
    public function getTotalSubscriptionsRevenue()
    {
        return $this->container['total_subscriptions_revenue'];
    }

    /**
     * Sets total_subscriptions_revenue
     *
     * @param int $total_subscriptions_revenue total_subscriptions_revenue
     *
     * @return self
     */
    public function setTotalSubscriptionsRevenue($total_subscriptions_revenue)
    {
        if (is_null($total_subscriptions_revenue)) {
            throw new \InvalidArgumentException('non-nullable total_subscriptions_revenue cannot be null');
        }
        $this->container['total_subscriptions_revenue'] = $total_subscriptions_revenue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


