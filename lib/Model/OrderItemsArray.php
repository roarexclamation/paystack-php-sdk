<?php
/**
 * OrderItemsArray
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderItemsArray Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderItemsArray implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItemsArray';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_item_id' => 'int',
        'order_id' => 'int',
        'type' => 'string',
        'item' => 'int',
        'current_total_items_price' => 'int',
        'files' => 'string',
        'order' => 'int',
        'amount' => 'int',
        'quantity' => 'int',
        'created_at' => 'string',
        'name' => 'string',
        'product_level_type' => 'string',
        'product_id' => 'int',
        'product_success_message' => 'mixed',
        'product_redirect_url' => 'mixed',
        'ifnull_p1_expires_in_p2_expires_in' => 'mixed',
        'product_quantity_sold' => 'int',
        'product_notification_emails' => 'mixed',
        'ifnull_p1_metadata_p2_metadata' => 'string',
        'storefront_redirect_url' => 'mixed',
        'storefront_success_message' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_item_id' => null,
        'order_id' => null,
        'type' => null,
        'item' => null,
        'current_total_items_price' => null,
        'files' => null,
        'order' => null,
        'amount' => null,
        'quantity' => null,
        'created_at' => null,
        'name' => null,
        'product_level_type' => null,
        'product_id' => null,
        'product_success_message' => null,
        'product_redirect_url' => null,
        'ifnull_p1_expires_in_p2_expires_in' => null,
        'product_quantity_sold' => null,
        'product_notification_emails' => null,
        'ifnull_p1_metadata_p2_metadata' => null,
        'storefront_redirect_url' => null,
        'storefront_success_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_item_id' => false,
        'order_id' => false,
        'type' => false,
        'item' => false,
        'current_total_items_price' => false,
        'files' => false,
        'order' => false,
        'amount' => false,
        'quantity' => false,
        'created_at' => false,
        'name' => false,
        'product_level_type' => false,
        'product_id' => false,
        'product_success_message' => true,
        'product_redirect_url' => true,
        'ifnull_p1_expires_in_p2_expires_in' => true,
        'product_quantity_sold' => false,
        'product_notification_emails' => true,
        'ifnull_p1_metadata_p2_metadata' => false,
        'storefront_redirect_url' => true,
        'storefront_success_message' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_item_id' => 'order_item_id',
        'order_id' => 'orderId',
        'type' => 'type',
        'item' => 'item',
        'current_total_items_price' => 'current_total_items_price',
        'files' => 'files',
        'order' => 'order',
        'amount' => 'amount',
        'quantity' => 'quantity',
        'created_at' => 'createdAt',
        'name' => 'name',
        'product_level_type' => 'product_level_type',
        'product_id' => 'product_id',
        'product_success_message' => 'product_success_message',
        'product_redirect_url' => 'product_redirect_url',
        'ifnull_p1_expires_in_p2_expires_in' => 'IFNULL(p1.expires_in, p2.expires_in)',
        'product_quantity_sold' => 'product_quantity_sold',
        'product_notification_emails' => 'product_notification_emails',
        'ifnull_p1_metadata_p2_metadata' => 'IFNULL(p1.metadata, p2.metadata)',
        'storefront_redirect_url' => 'storefront_redirect_url',
        'storefront_success_message' => 'storefront_success_message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_item_id' => 'setOrderItemId',
        'order_id' => 'setOrderId',
        'type' => 'setType',
        'item' => 'setItem',
        'current_total_items_price' => 'setCurrentTotalItemsPrice',
        'files' => 'setFiles',
        'order' => 'setOrder',
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'created_at' => 'setCreatedAt',
        'name' => 'setName',
        'product_level_type' => 'setProductLevelType',
        'product_id' => 'setProductId',
        'product_success_message' => 'setProductSuccessMessage',
        'product_redirect_url' => 'setProductRedirectUrl',
        'ifnull_p1_expires_in_p2_expires_in' => 'setIfnullP1ExpiresInP2ExpiresIn',
        'product_quantity_sold' => 'setProductQuantitySold',
        'product_notification_emails' => 'setProductNotificationEmails',
        'ifnull_p1_metadata_p2_metadata' => 'setIfnullP1MetadataP2Metadata',
        'storefront_redirect_url' => 'setStorefrontRedirectUrl',
        'storefront_success_message' => 'setStorefrontSuccessMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_item_id' => 'getOrderItemId',
        'order_id' => 'getOrderId',
        'type' => 'getType',
        'item' => 'getItem',
        'current_total_items_price' => 'getCurrentTotalItemsPrice',
        'files' => 'getFiles',
        'order' => 'getOrder',
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'created_at' => 'getCreatedAt',
        'name' => 'getName',
        'product_level_type' => 'getProductLevelType',
        'product_id' => 'getProductId',
        'product_success_message' => 'getProductSuccessMessage',
        'product_redirect_url' => 'getProductRedirectUrl',
        'ifnull_p1_expires_in_p2_expires_in' => 'getIfnullP1ExpiresInP2ExpiresIn',
        'product_quantity_sold' => 'getProductQuantitySold',
        'product_notification_emails' => 'getProductNotificationEmails',
        'ifnull_p1_metadata_p2_metadata' => 'getIfnullP1MetadataP2Metadata',
        'storefront_redirect_url' => 'getStorefrontRedirectUrl',
        'storefront_success_message' => 'getStorefrontSuccessMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_item_id', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('current_total_items_price', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('product_level_type', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_success_message', $data ?? [], null);
        $this->setIfExists('product_redirect_url', $data ?? [], null);
        $this->setIfExists('ifnull_p1_expires_in_p2_expires_in', $data ?? [], null);
        $this->setIfExists('product_quantity_sold', $data ?? [], null);
        $this->setIfExists('product_notification_emails', $data ?? [], null);
        $this->setIfExists('ifnull_p1_metadata_p2_metadata', $data ?? [], null);
        $this->setIfExists('storefront_redirect_url', $data ?? [], null);
        $this->setIfExists('storefront_success_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_item_id'] === null) {
            $invalidProperties[] = "'order_item_id' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        if ($this->container['current_total_items_price'] === null) {
            $invalidProperties[] = "'current_total_items_price' can't be null";
        }
        if ($this->container['files'] === null) {
            $invalidProperties[] = "'files' can't be null";
        }
        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['product_level_type'] === null) {
            $invalidProperties[] = "'product_level_type' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['product_success_message'] === null) {
            $invalidProperties[] = "'product_success_message' can't be null";
        }
        if ($this->container['product_redirect_url'] === null) {
            $invalidProperties[] = "'product_redirect_url' can't be null";
        }
        if ($this->container['ifnull_p1_expires_in_p2_expires_in'] === null) {
            $invalidProperties[] = "'ifnull_p1_expires_in_p2_expires_in' can't be null";
        }
        if ($this->container['product_quantity_sold'] === null) {
            $invalidProperties[] = "'product_quantity_sold' can't be null";
        }
        if ($this->container['product_notification_emails'] === null) {
            $invalidProperties[] = "'product_notification_emails' can't be null";
        }
        if ($this->container['ifnull_p1_metadata_p2_metadata'] === null) {
            $invalidProperties[] = "'ifnull_p1_metadata_p2_metadata' can't be null";
        }
        if ($this->container['storefront_redirect_url'] === null) {
            $invalidProperties[] = "'storefront_redirect_url' can't be null";
        }
        if ($this->container['storefront_success_message'] === null) {
            $invalidProperties[] = "'storefront_success_message' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_item_id
     *
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int $order_item_id order_item_id
     *
     * @return self
     */
    public function setOrderItemId($order_item_id)
    {
        if (is_null($order_item_id)) {
            throw new \InvalidArgumentException('non-nullable order_item_id cannot be null');
        }
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets item
     *
     * @return int
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param int $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets current_total_items_price
     *
     * @return int
     */
    public function getCurrentTotalItemsPrice()
    {
        return $this->container['current_total_items_price'];
    }

    /**
     * Sets current_total_items_price
     *
     * @param int $current_total_items_price current_total_items_price
     *
     * @return self
     */
    public function setCurrentTotalItemsPrice($current_total_items_price)
    {
        if (is_null($current_total_items_price)) {
            throw new \InvalidArgumentException('non-nullable current_total_items_price cannot be null');
        }
        $this->container['current_total_items_price'] = $current_total_items_price;

        return $this;
    }

    /**
     * Gets files
     *
     * @return string
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product_level_type
     *
     * @return string
     */
    public function getProductLevelType()
    {
        return $this->container['product_level_type'];
    }

    /**
     * Sets product_level_type
     *
     * @param string $product_level_type product_level_type
     *
     * @return self
     */
    public function setProductLevelType($product_level_type)
    {
        if (is_null($product_level_type)) {
            throw new \InvalidArgumentException('non-nullable product_level_type cannot be null');
        }
        $this->container['product_level_type'] = $product_level_type;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_success_message
     *
     * @return mixed
     */
    public function getProductSuccessMessage()
    {
        return $this->container['product_success_message'];
    }

    /**
     * Sets product_success_message
     *
     * @param mixed $product_success_message product_success_message
     *
     * @return self
     */
    public function setProductSuccessMessage($product_success_message)
    {
        if (is_null($product_success_message)) {
            array_push($this->openAPINullablesSetToNull, 'product_success_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_success_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_success_message'] = $product_success_message;

        return $this;
    }

    /**
     * Gets product_redirect_url
     *
     * @return mixed
     */
    public function getProductRedirectUrl()
    {
        return $this->container['product_redirect_url'];
    }

    /**
     * Sets product_redirect_url
     *
     * @param mixed $product_redirect_url product_redirect_url
     *
     * @return self
     */
    public function setProductRedirectUrl($product_redirect_url)
    {
        if (is_null($product_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'product_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_redirect_url'] = $product_redirect_url;

        return $this;
    }

    /**
     * Gets ifnull_p1_expires_in_p2_expires_in
     *
     * @return mixed
     */
    public function getIfnullP1ExpiresInP2ExpiresIn()
    {
        return $this->container['ifnull_p1_expires_in_p2_expires_in'];
    }

    /**
     * Sets ifnull_p1_expires_in_p2_expires_in
     *
     * @param mixed $ifnull_p1_expires_in_p2_expires_in ifnull_p1_expires_in_p2_expires_in
     *
     * @return self
     */
    public function setIfnullP1ExpiresInP2ExpiresIn($ifnull_p1_expires_in_p2_expires_in)
    {
        if (is_null($ifnull_p1_expires_in_p2_expires_in)) {
            array_push($this->openAPINullablesSetToNull, 'ifnull_p1_expires_in_p2_expires_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ifnull_p1_expires_in_p2_expires_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ifnull_p1_expires_in_p2_expires_in'] = $ifnull_p1_expires_in_p2_expires_in;

        return $this;
    }

    /**
     * Gets product_quantity_sold
     *
     * @return int
     */
    public function getProductQuantitySold()
    {
        return $this->container['product_quantity_sold'];
    }

    /**
     * Sets product_quantity_sold
     *
     * @param int $product_quantity_sold product_quantity_sold
     *
     * @return self
     */
    public function setProductQuantitySold($product_quantity_sold)
    {
        if (is_null($product_quantity_sold)) {
            throw new \InvalidArgumentException('non-nullable product_quantity_sold cannot be null');
        }
        $this->container['product_quantity_sold'] = $product_quantity_sold;

        return $this;
    }

    /**
     * Gets product_notification_emails
     *
     * @return mixed
     */
    public function getProductNotificationEmails()
    {
        return $this->container['product_notification_emails'];
    }

    /**
     * Sets product_notification_emails
     *
     * @param mixed $product_notification_emails product_notification_emails
     *
     * @return self
     */
    public function setProductNotificationEmails($product_notification_emails)
    {
        if (is_null($product_notification_emails)) {
            array_push($this->openAPINullablesSetToNull, 'product_notification_emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_notification_emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_notification_emails'] = $product_notification_emails;

        return $this;
    }

    /**
     * Gets ifnull_p1_metadata_p2_metadata
     *
     * @return string
     */
    public function getIfnullP1MetadataP2Metadata()
    {
        return $this->container['ifnull_p1_metadata_p2_metadata'];
    }

    /**
     * Sets ifnull_p1_metadata_p2_metadata
     *
     * @param string $ifnull_p1_metadata_p2_metadata ifnull_p1_metadata_p2_metadata
     *
     * @return self
     */
    public function setIfnullP1MetadataP2Metadata($ifnull_p1_metadata_p2_metadata)
    {
        if (is_null($ifnull_p1_metadata_p2_metadata)) {
            throw new \InvalidArgumentException('non-nullable ifnull_p1_metadata_p2_metadata cannot be null');
        }
        $this->container['ifnull_p1_metadata_p2_metadata'] = $ifnull_p1_metadata_p2_metadata;

        return $this;
    }

    /**
     * Gets storefront_redirect_url
     *
     * @return mixed
     */
    public function getStorefrontRedirectUrl()
    {
        return $this->container['storefront_redirect_url'];
    }

    /**
     * Sets storefront_redirect_url
     *
     * @param mixed $storefront_redirect_url storefront_redirect_url
     *
     * @return self
     */
    public function setStorefrontRedirectUrl($storefront_redirect_url)
    {
        if (is_null($storefront_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'storefront_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storefront_redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storefront_redirect_url'] = $storefront_redirect_url;

        return $this;
    }

    /**
     * Gets storefront_success_message
     *
     * @return mixed
     */
    public function getStorefrontSuccessMessage()
    {
        return $this->container['storefront_success_message'];
    }

    /**
     * Sets storefront_success_message
     *
     * @param mixed $storefront_success_message storefront_success_message
     *
     * @return self
     */
    public function setStorefrontSuccessMessage($storefront_success_message)
    {
        if (is_null($storefront_success_message)) {
            array_push($this->openAPINullablesSetToNull, 'storefront_success_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storefront_success_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storefront_success_message'] = $storefront_success_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


