<?php
/**
 * MiscellaneousListCountriesResponseArrayRelationshipsCurrencySupportedCurrenciesUSDBank
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MiscellaneousListCountriesResponseArrayRelationshipsCurrencySupportedCurrenciesUSDBank Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MiscellaneousListCountriesResponseArrayRelationshipsCurrencySupportedCurrenciesUSDBank implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MiscellaneousListCountriesResponseArray_relationships_currency_supported_currencies_USD_bank';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bank_type' => 'string',
        'required_fields' => 'string[]',
        'branch_code' => 'bool',
        'branch_code_type' => 'string',
        'account_name' => 'bool',
        'account_verification_required' => 'bool',
        'account_number_label' => 'string',
        'account_number_pattern' => '\OpenAPI\Client\Model\MiscellaneousListCountriesResponseArrayRelationshipsCurrencySupportedCurrenciesNGNBankAccountNumberPattern',
        'documents' => 'mixed[]',
        'notices' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bank_type' => null,
        'required_fields' => null,
        'branch_code' => null,
        'branch_code_type' => null,
        'account_name' => null,
        'account_verification_required' => null,
        'account_number_label' => null,
        'account_number_pattern' => null,
        'documents' => null,
        'notices' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bank_type' => false,
        'required_fields' => false,
        'branch_code' => false,
        'branch_code_type' => false,
        'account_name' => false,
        'account_verification_required' => false,
        'account_number_label' => false,
        'account_number_pattern' => false,
        'documents' => false,
        'notices' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bank_type' => 'bank_type',
        'required_fields' => 'required_fields',
        'branch_code' => 'branch_code',
        'branch_code_type' => 'branch_code_type',
        'account_name' => 'account_name',
        'account_verification_required' => 'account_verification_required',
        'account_number_label' => 'account_number_label',
        'account_number_pattern' => 'account_number_pattern',
        'documents' => 'documents',
        'notices' => 'notices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bank_type' => 'setBankType',
        'required_fields' => 'setRequiredFields',
        'branch_code' => 'setBranchCode',
        'branch_code_type' => 'setBranchCodeType',
        'account_name' => 'setAccountName',
        'account_verification_required' => 'setAccountVerificationRequired',
        'account_number_label' => 'setAccountNumberLabel',
        'account_number_pattern' => 'setAccountNumberPattern',
        'documents' => 'setDocuments',
        'notices' => 'setNotices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bank_type' => 'getBankType',
        'required_fields' => 'getRequiredFields',
        'branch_code' => 'getBranchCode',
        'branch_code_type' => 'getBranchCodeType',
        'account_name' => 'getAccountName',
        'account_verification_required' => 'getAccountVerificationRequired',
        'account_number_label' => 'getAccountNumberLabel',
        'account_number_pattern' => 'getAccountNumberPattern',
        'documents' => 'getDocuments',
        'notices' => 'getNotices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bank_type', $data ?? [], null);
        $this->setIfExists('required_fields', $data ?? [], null);
        $this->setIfExists('branch_code', $data ?? [], null);
        $this->setIfExists('branch_code_type', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_verification_required', $data ?? [], null);
        $this->setIfExists('account_number_label', $data ?? [], null);
        $this->setIfExists('account_number_pattern', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('notices', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bank_type'] === null) {
            $invalidProperties[] = "'bank_type' can't be null";
        }
        if ($this->container['required_fields'] === null) {
            $invalidProperties[] = "'required_fields' can't be null";
        }
        if ($this->container['branch_code'] === null) {
            $invalidProperties[] = "'branch_code' can't be null";
        }
        if ($this->container['branch_code_type'] === null) {
            $invalidProperties[] = "'branch_code_type' can't be null";
        }
        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ($this->container['account_verification_required'] === null) {
            $invalidProperties[] = "'account_verification_required' can't be null";
        }
        if ($this->container['account_number_label'] === null) {
            $invalidProperties[] = "'account_number_label' can't be null";
        }
        if ($this->container['account_number_pattern'] === null) {
            $invalidProperties[] = "'account_number_pattern' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['notices'] === null) {
            $invalidProperties[] = "'notices' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bank_type
     *
     * @return string
     */
    public function getBankType()
    {
        return $this->container['bank_type'];
    }

    /**
     * Sets bank_type
     *
     * @param string $bank_type bank_type
     *
     * @return self
     */
    public function setBankType($bank_type)
    {
        if (is_null($bank_type)) {
            throw new \InvalidArgumentException('non-nullable bank_type cannot be null');
        }
        $this->container['bank_type'] = $bank_type;

        return $this;
    }

    /**
     * Gets required_fields
     *
     * @return string[]
     */
    public function getRequiredFields()
    {
        return $this->container['required_fields'];
    }

    /**
     * Sets required_fields
     *
     * @param string[] $required_fields required_fields
     *
     * @return self
     */
    public function setRequiredFields($required_fields)
    {
        if (is_null($required_fields)) {
            throw new \InvalidArgumentException('non-nullable required_fields cannot be null');
        }
        $this->container['required_fields'] = $required_fields;

        return $this;
    }

    /**
     * Gets branch_code
     *
     * @return bool
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     *
     * @param bool $branch_code branch_code
     *
     * @return self
     */
    public function setBranchCode($branch_code)
    {
        if (is_null($branch_code)) {
            throw new \InvalidArgumentException('non-nullable branch_code cannot be null');
        }
        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets branch_code_type
     *
     * @return string
     */
    public function getBranchCodeType()
    {
        return $this->container['branch_code_type'];
    }

    /**
     * Sets branch_code_type
     *
     * @param string $branch_code_type branch_code_type
     *
     * @return self
     */
    public function setBranchCodeType($branch_code_type)
    {
        if (is_null($branch_code_type)) {
            throw new \InvalidArgumentException('non-nullable branch_code_type cannot be null');
        }
        $this->container['branch_code_type'] = $branch_code_type;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return bool
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param bool $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        if (is_null($account_name)) {
            throw new \InvalidArgumentException('non-nullable account_name cannot be null');
        }
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_verification_required
     *
     * @return bool
     */
    public function getAccountVerificationRequired()
    {
        return $this->container['account_verification_required'];
    }

    /**
     * Sets account_verification_required
     *
     * @param bool $account_verification_required account_verification_required
     *
     * @return self
     */
    public function setAccountVerificationRequired($account_verification_required)
    {
        if (is_null($account_verification_required)) {
            throw new \InvalidArgumentException('non-nullable account_verification_required cannot be null');
        }
        $this->container['account_verification_required'] = $account_verification_required;

        return $this;
    }

    /**
     * Gets account_number_label
     *
     * @return string
     */
    public function getAccountNumberLabel()
    {
        return $this->container['account_number_label'];
    }

    /**
     * Sets account_number_label
     *
     * @param string $account_number_label account_number_label
     *
     * @return self
     */
    public function setAccountNumberLabel($account_number_label)
    {
        if (is_null($account_number_label)) {
            throw new \InvalidArgumentException('non-nullable account_number_label cannot be null');
        }
        $this->container['account_number_label'] = $account_number_label;

        return $this;
    }

    /**
     * Gets account_number_pattern
     *
     * @return \OpenAPI\Client\Model\MiscellaneousListCountriesResponseArrayRelationshipsCurrencySupportedCurrenciesNGNBankAccountNumberPattern
     */
    public function getAccountNumberPattern()
    {
        return $this->container['account_number_pattern'];
    }

    /**
     * Sets account_number_pattern
     *
     * @param \OpenAPI\Client\Model\MiscellaneousListCountriesResponseArrayRelationshipsCurrencySupportedCurrenciesNGNBankAccountNumberPattern $account_number_pattern account_number_pattern
     *
     * @return self
     */
    public function setAccountNumberPattern($account_number_pattern)
    {
        if (is_null($account_number_pattern)) {
            throw new \InvalidArgumentException('non-nullable account_number_pattern cannot be null');
        }
        $this->container['account_number_pattern'] = $account_number_pattern;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return mixed[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param mixed[] $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets notices
     *
     * @return string[]
     */
    public function getNotices()
    {
        return $this->container['notices'];
    }

    /**
     * Sets notices
     *
     * @param string[] $notices notices
     *
     * @return self
     */
    public function setNotices($notices)
    {
        if (is_null($notices)) {
            throw new \InvalidArgumentException('non-nullable notices cannot be null');
        }
        $this->container['notices'] = $notices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


