<?php
/**
 * SubscriptionCreateResponseData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubscriptionCreateResponseData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubscriptionCreateResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubscriptionCreateResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer' => 'int',
        'plan' => 'int',
        'integration' => 'int',
        'domain' => 'string',
        'start' => 'int',
        'status' => 'string',
        'quantity' => 'int',
        'amount' => 'int',
        'authorization' => 'int',
        'invoice_limit' => 'int',
        'split_code' => 'mixed',
        'subscription_code' => 'string',
        'email_token' => 'string',
        'id' => 'int',
        'cancelled_at' => 'mixed',
        'created_at' => 'string',
        'updated_at' => 'string',
        'cron_expression' => 'string',
        'next_payment_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer' => null,
        'plan' => null,
        'integration' => null,
        'domain' => null,
        'start' => null,
        'status' => null,
        'quantity' => null,
        'amount' => null,
        'authorization' => null,
        'invoice_limit' => null,
        'split_code' => null,
        'subscription_code' => null,
        'email_token' => null,
        'id' => null,
        'cancelled_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'cron_expression' => null,
        'next_payment_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer' => false,
        'plan' => false,
        'integration' => false,
        'domain' => false,
        'start' => false,
        'status' => false,
        'quantity' => false,
        'amount' => false,
        'authorization' => false,
        'invoice_limit' => false,
        'split_code' => true,
        'subscription_code' => false,
        'email_token' => false,
        'id' => false,
        'cancelled_at' => true,
        'created_at' => false,
        'updated_at' => false,
        'cron_expression' => false,
        'next_payment_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'customer',
        'plan' => 'plan',
        'integration' => 'integration',
        'domain' => 'domain',
        'start' => 'start',
        'status' => 'status',
        'quantity' => 'quantity',
        'amount' => 'amount',
        'authorization' => 'authorization',
        'invoice_limit' => 'invoice_limit',
        'split_code' => 'split_code',
        'subscription_code' => 'subscription_code',
        'email_token' => 'email_token',
        'id' => 'id',
        'cancelled_at' => 'cancelledAt',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'cron_expression' => 'cron_expression',
        'next_payment_date' => 'next_payment_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
        'plan' => 'setPlan',
        'integration' => 'setIntegration',
        'domain' => 'setDomain',
        'start' => 'setStart',
        'status' => 'setStatus',
        'quantity' => 'setQuantity',
        'amount' => 'setAmount',
        'authorization' => 'setAuthorization',
        'invoice_limit' => 'setInvoiceLimit',
        'split_code' => 'setSplitCode',
        'subscription_code' => 'setSubscriptionCode',
        'email_token' => 'setEmailToken',
        'id' => 'setId',
        'cancelled_at' => 'setCancelledAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'cron_expression' => 'setCronExpression',
        'next_payment_date' => 'setNextPaymentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
        'plan' => 'getPlan',
        'integration' => 'getIntegration',
        'domain' => 'getDomain',
        'start' => 'getStart',
        'status' => 'getStatus',
        'quantity' => 'getQuantity',
        'amount' => 'getAmount',
        'authorization' => 'getAuthorization',
        'invoice_limit' => 'getInvoiceLimit',
        'split_code' => 'getSplitCode',
        'subscription_code' => 'getSubscriptionCode',
        'email_token' => 'getEmailToken',
        'id' => 'getId',
        'cancelled_at' => 'getCancelledAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'cron_expression' => 'getCronExpression',
        'next_payment_date' => 'getNextPaymentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('authorization', $data ?? [], null);
        $this->setIfExists('invoice_limit', $data ?? [], null);
        $this->setIfExists('split_code', $data ?? [], null);
        $this->setIfExists('subscription_code', $data ?? [], null);
        $this->setIfExists('email_token', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('cancelled_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('cron_expression', $data ?? [], null);
        $this->setIfExists('next_payment_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['plan'] === null) {
            $invalidProperties[] = "'plan' can't be null";
        }
        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['authorization'] === null) {
            $invalidProperties[] = "'authorization' can't be null";
        }
        if ($this->container['invoice_limit'] === null) {
            $invalidProperties[] = "'invoice_limit' can't be null";
        }
        if ($this->container['split_code'] === null) {
            $invalidProperties[] = "'split_code' can't be null";
        }
        if ($this->container['subscription_code'] === null) {
            $invalidProperties[] = "'subscription_code' can't be null";
        }
        if ($this->container['email_token'] === null) {
            $invalidProperties[] = "'email_token' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['cancelled_at'] === null) {
            $invalidProperties[] = "'cancelled_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['cron_expression'] === null) {
            $invalidProperties[] = "'cron_expression' can't be null";
        }
        if ($this->container['next_payment_date'] === null) {
            $invalidProperties[] = "'next_payment_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return int
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param int $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return int
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param int $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return int
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param int $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start start
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return int
     */
    public function getAuthorization()
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param int $authorization authorization
     *
     * @return self
     */
    public function setAuthorization($authorization)
    {
        if (is_null($authorization)) {
            throw new \InvalidArgumentException('non-nullable authorization cannot be null');
        }
        $this->container['authorization'] = $authorization;

        return $this;
    }

    /**
     * Gets invoice_limit
     *
     * @return int
     */
    public function getInvoiceLimit()
    {
        return $this->container['invoice_limit'];
    }

    /**
     * Sets invoice_limit
     *
     * @param int $invoice_limit invoice_limit
     *
     * @return self
     */
    public function setInvoiceLimit($invoice_limit)
    {
        if (is_null($invoice_limit)) {
            throw new \InvalidArgumentException('non-nullable invoice_limit cannot be null');
        }
        $this->container['invoice_limit'] = $invoice_limit;

        return $this;
    }

    /**
     * Gets split_code
     *
     * @return mixed
     */
    public function getSplitCode()
    {
        return $this->container['split_code'];
    }

    /**
     * Sets split_code
     *
     * @param mixed $split_code split_code
     *
     * @return self
     */
    public function setSplitCode($split_code)
    {
        if (is_null($split_code)) {
            array_push($this->openAPINullablesSetToNull, 'split_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('split_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['split_code'] = $split_code;

        return $this;
    }

    /**
     * Gets subscription_code
     *
     * @return string
     */
    public function getSubscriptionCode()
    {
        return $this->container['subscription_code'];
    }

    /**
     * Sets subscription_code
     *
     * @param string $subscription_code subscription_code
     *
     * @return self
     */
    public function setSubscriptionCode($subscription_code)
    {
        if (is_null($subscription_code)) {
            throw new \InvalidArgumentException('non-nullable subscription_code cannot be null');
        }
        $this->container['subscription_code'] = $subscription_code;

        return $this;
    }

    /**
     * Gets email_token
     *
     * @return string
     */
    public function getEmailToken()
    {
        return $this->container['email_token'];
    }

    /**
     * Sets email_token
     *
     * @param string $email_token email_token
     *
     * @return self
     */
    public function setEmailToken($email_token)
    {
        if (is_null($email_token)) {
            throw new \InvalidArgumentException('non-nullable email_token cannot be null');
        }
        $this->container['email_token'] = $email_token;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cancelled_at
     *
     * @return mixed
     */
    public function getCancelledAt()
    {
        return $this->container['cancelled_at'];
    }

    /**
     * Sets cancelled_at
     *
     * @param mixed $cancelled_at cancelled_at
     *
     * @return self
     */
    public function setCancelledAt($cancelled_at)
    {
        if (is_null($cancelled_at)) {
            array_push($this->openAPINullablesSetToNull, 'cancelled_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cancelled_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cancelled_at'] = $cancelled_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets cron_expression
     *
     * @return string
     */
    public function getCronExpression()
    {
        return $this->container['cron_expression'];
    }

    /**
     * Sets cron_expression
     *
     * @param string $cron_expression cron_expression
     *
     * @return self
     */
    public function setCronExpression($cron_expression)
    {
        if (is_null($cron_expression)) {
            throw new \InvalidArgumentException('non-nullable cron_expression cannot be null');
        }
        $this->container['cron_expression'] = $cron_expression;

        return $this;
    }

    /**
     * Gets next_payment_date
     *
     * @return string
     */
    public function getNextPaymentDate()
    {
        return $this->container['next_payment_date'];
    }

    /**
     * Sets next_payment_date
     *
     * @param string $next_payment_date next_payment_date
     *
     * @return self
     */
    public function setNextPaymentDate($next_payment_date)
    {
        if (is_null($next_payment_date)) {
            throw new \InvalidArgumentException('non-nullable next_payment_date cannot be null');
        }
        $this->container['next_payment_date'] = $next_payment_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


