<?php
/**
 * SubaccountListResponseArray
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubaccountListResponseArray Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubaccountListResponseArray implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubaccountListResponseArray';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'subaccount_code' => 'string',
        'business_name' => 'string',
        'description' => 'string',
        'primary_contact_name' => 'string',
        'primary_contact_email' => 'string',
        'primary_contact_phone' => 'string',
        'metadata' => 'string',
        'percentage_charge' => 'float',
        'settlement_bank' => 'string',
        'bank_id' => 'int',
        'account_number' => 'string',
        'currency' => 'string',
        'active' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'subaccount_code' => null,
        'business_name' => null,
        'description' => null,
        'primary_contact_name' => null,
        'primary_contact_email' => null,
        'primary_contact_phone' => null,
        'metadata' => null,
        'percentage_charge' => null,
        'settlement_bank' => null,
        'bank_id' => null,
        'account_number' => null,
        'currency' => null,
        'active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'subaccount_code' => false,
        'business_name' => false,
        'description' => false,
        'primary_contact_name' => false,
        'primary_contact_email' => false,
        'primary_contact_phone' => false,
        'metadata' => false,
        'percentage_charge' => false,
        'settlement_bank' => false,
        'bank_id' => false,
        'account_number' => false,
        'currency' => false,
        'active' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'subaccount_code' => 'subaccount_code',
        'business_name' => 'business_name',
        'description' => 'description',
        'primary_contact_name' => 'primary_contact_name',
        'primary_contact_email' => 'primary_contact_email',
        'primary_contact_phone' => 'primary_contact_phone',
        'metadata' => 'metadata',
        'percentage_charge' => 'percentage_charge',
        'settlement_bank' => 'settlement_bank',
        'bank_id' => 'bank_id',
        'account_number' => 'account_number',
        'currency' => 'currency',
        'active' => 'active'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'subaccount_code' => 'setSubaccountCode',
        'business_name' => 'setBusinessName',
        'description' => 'setDescription',
        'primary_contact_name' => 'setPrimaryContactName',
        'primary_contact_email' => 'setPrimaryContactEmail',
        'primary_contact_phone' => 'setPrimaryContactPhone',
        'metadata' => 'setMetadata',
        'percentage_charge' => 'setPercentageCharge',
        'settlement_bank' => 'setSettlementBank',
        'bank_id' => 'setBankId',
        'account_number' => 'setAccountNumber',
        'currency' => 'setCurrency',
        'active' => 'setActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'subaccount_code' => 'getSubaccountCode',
        'business_name' => 'getBusinessName',
        'description' => 'getDescription',
        'primary_contact_name' => 'getPrimaryContactName',
        'primary_contact_email' => 'getPrimaryContactEmail',
        'primary_contact_phone' => 'getPrimaryContactPhone',
        'metadata' => 'getMetadata',
        'percentage_charge' => 'getPercentageCharge',
        'settlement_bank' => 'getSettlementBank',
        'bank_id' => 'getBankId',
        'account_number' => 'getAccountNumber',
        'currency' => 'getCurrency',
        'active' => 'getActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('subaccount_code', $data ?? [], null);
        $this->setIfExists('business_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('primary_contact_name', $data ?? [], null);
        $this->setIfExists('primary_contact_email', $data ?? [], null);
        $this->setIfExists('primary_contact_phone', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('percentage_charge', $data ?? [], null);
        $this->setIfExists('settlement_bank', $data ?? [], null);
        $this->setIfExists('bank_id', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['subaccount_code'] === null) {
            $invalidProperties[] = "'subaccount_code' can't be null";
        }
        if ($this->container['business_name'] === null) {
            $invalidProperties[] = "'business_name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['primary_contact_name'] === null) {
            $invalidProperties[] = "'primary_contact_name' can't be null";
        }
        if ($this->container['primary_contact_email'] === null) {
            $invalidProperties[] = "'primary_contact_email' can't be null";
        }
        if ($this->container['primary_contact_phone'] === null) {
            $invalidProperties[] = "'primary_contact_phone' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['percentage_charge'] === null) {
            $invalidProperties[] = "'percentage_charge' can't be null";
        }
        if ($this->container['settlement_bank'] === null) {
            $invalidProperties[] = "'settlement_bank' can't be null";
        }
        if ($this->container['bank_id'] === null) {
            $invalidProperties[] = "'bank_id' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets subaccount_code
     *
     * @return string
     */
    public function getSubaccountCode()
    {
        return $this->container['subaccount_code'];
    }

    /**
     * Sets subaccount_code
     *
     * @param string $subaccount_code subaccount_code
     *
     * @return self
     */
    public function setSubaccountCode($subaccount_code)
    {
        if (is_null($subaccount_code)) {
            throw new \InvalidArgumentException('non-nullable subaccount_code cannot be null');
        }
        $this->container['subaccount_code'] = $subaccount_code;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name business_name
     *
     * @return self
     */
    public function setBusinessName($business_name)
    {
        if (is_null($business_name)) {
            throw new \InvalidArgumentException('non-nullable business_name cannot be null');
        }
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets primary_contact_name
     *
     * @return string
     */
    public function getPrimaryContactName()
    {
        return $this->container['primary_contact_name'];
    }

    /**
     * Sets primary_contact_name
     *
     * @param string $primary_contact_name primary_contact_name
     *
     * @return self
     */
    public function setPrimaryContactName($primary_contact_name)
    {
        if (is_null($primary_contact_name)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_name cannot be null');
        }
        $this->container['primary_contact_name'] = $primary_contact_name;

        return $this;
    }

    /**
     * Gets primary_contact_email
     *
     * @return string
     */
    public function getPrimaryContactEmail()
    {
        return $this->container['primary_contact_email'];
    }

    /**
     * Sets primary_contact_email
     *
     * @param string $primary_contact_email primary_contact_email
     *
     * @return self
     */
    public function setPrimaryContactEmail($primary_contact_email)
    {
        if (is_null($primary_contact_email)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_email cannot be null');
        }
        $this->container['primary_contact_email'] = $primary_contact_email;

        return $this;
    }

    /**
     * Gets primary_contact_phone
     *
     * @return string
     */
    public function getPrimaryContactPhone()
    {
        return $this->container['primary_contact_phone'];
    }

    /**
     * Sets primary_contact_phone
     *
     * @param string $primary_contact_phone primary_contact_phone
     *
     * @return self
     */
    public function setPrimaryContactPhone($primary_contact_phone)
    {
        if (is_null($primary_contact_phone)) {
            throw new \InvalidArgumentException('non-nullable primary_contact_phone cannot be null');
        }
        $this->container['primary_contact_phone'] = $primary_contact_phone;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets percentage_charge
     *
     * @return float
     */
    public function getPercentageCharge()
    {
        return $this->container['percentage_charge'];
    }

    /**
     * Sets percentage_charge
     *
     * @param float $percentage_charge percentage_charge
     *
     * @return self
     */
    public function setPercentageCharge($percentage_charge)
    {
        if (is_null($percentage_charge)) {
            throw new \InvalidArgumentException('non-nullable percentage_charge cannot be null');
        }
        $this->container['percentage_charge'] = $percentage_charge;

        return $this;
    }

    /**
     * Gets settlement_bank
     *
     * @return string
     */
    public function getSettlementBank()
    {
        return $this->container['settlement_bank'];
    }

    /**
     * Sets settlement_bank
     *
     * @param string $settlement_bank settlement_bank
     *
     * @return self
     */
    public function setSettlementBank($settlement_bank)
    {
        if (is_null($settlement_bank)) {
            throw new \InvalidArgumentException('non-nullable settlement_bank cannot be null');
        }
        $this->container['settlement_bank'] = $settlement_bank;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return int
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param int $bank_id bank_id
     *
     * @return self
     */
    public function setBankId($bank_id)
    {
        if (is_null($bank_id)) {
            throw new \InvalidArgumentException('non-nullable bank_id cannot be null');
        }
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


