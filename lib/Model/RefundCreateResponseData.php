<?php
/**
 * RefundCreateResponseData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RefundCreateResponseData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RefundCreateResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RefundCreateResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction' => '\OpenAPI\Client\Model\RefundCreateResponseDataTransaction',
        'integration' => 'int',
        'deducted_amount' => 'int',
        'channel' => 'mixed',
        'merchant_note' => 'string',
        'customer_note' => 'string',
        'status' => 'string',
        'refunded_by' => 'string',
        'expected_at' => 'string',
        'currency' => 'string',
        'domain' => 'string',
        'amount' => 'int',
        'fully_deducted' => 'bool',
        'id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction' => null,
        'integration' => null,
        'deducted_amount' => null,
        'channel' => null,
        'merchant_note' => null,
        'customer_note' => null,
        'status' => null,
        'refunded_by' => null,
        'expected_at' => null,
        'currency' => null,
        'domain' => null,
        'amount' => null,
        'fully_deducted' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction' => false,
        'integration' => false,
        'deducted_amount' => false,
        'channel' => true,
        'merchant_note' => false,
        'customer_note' => false,
        'status' => false,
        'refunded_by' => false,
        'expected_at' => false,
        'currency' => false,
        'domain' => false,
        'amount' => false,
        'fully_deducted' => false,
        'id' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction' => 'transaction',
        'integration' => 'integration',
        'deducted_amount' => 'deducted_amount',
        'channel' => 'channel',
        'merchant_note' => 'merchant_note',
        'customer_note' => 'customer_note',
        'status' => 'status',
        'refunded_by' => 'refunded_by',
        'expected_at' => 'expected_at',
        'currency' => 'currency',
        'domain' => 'domain',
        'amount' => 'amount',
        'fully_deducted' => 'fully_deducted',
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction' => 'setTransaction',
        'integration' => 'setIntegration',
        'deducted_amount' => 'setDeductedAmount',
        'channel' => 'setChannel',
        'merchant_note' => 'setMerchantNote',
        'customer_note' => 'setCustomerNote',
        'status' => 'setStatus',
        'refunded_by' => 'setRefundedBy',
        'expected_at' => 'setExpectedAt',
        'currency' => 'setCurrency',
        'domain' => 'setDomain',
        'amount' => 'setAmount',
        'fully_deducted' => 'setFullyDeducted',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction' => 'getTransaction',
        'integration' => 'getIntegration',
        'deducted_amount' => 'getDeductedAmount',
        'channel' => 'getChannel',
        'merchant_note' => 'getMerchantNote',
        'customer_note' => 'getCustomerNote',
        'status' => 'getStatus',
        'refunded_by' => 'getRefundedBy',
        'expected_at' => 'getExpectedAt',
        'currency' => 'getCurrency',
        'domain' => 'getDomain',
        'amount' => 'getAmount',
        'fully_deducted' => 'getFullyDeducted',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('deducted_amount', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('merchant_note', $data ?? [], null);
        $this->setIfExists('customer_note', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('refunded_by', $data ?? [], null);
        $this->setIfExists('expected_at', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('fully_deducted', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction'] === null) {
            $invalidProperties[] = "'transaction' can't be null";
        }
        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        if ($this->container['deducted_amount'] === null) {
            $invalidProperties[] = "'deducted_amount' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['merchant_note'] === null) {
            $invalidProperties[] = "'merchant_note' can't be null";
        }
        if ($this->container['customer_note'] === null) {
            $invalidProperties[] = "'customer_note' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['refunded_by'] === null) {
            $invalidProperties[] = "'refunded_by' can't be null";
        }
        if ($this->container['expected_at'] === null) {
            $invalidProperties[] = "'expected_at' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['fully_deducted'] === null) {
            $invalidProperties[] = "'fully_deducted' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction
     *
     * @return \OpenAPI\Client\Model\RefundCreateResponseDataTransaction
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \OpenAPI\Client\Model\RefundCreateResponseDataTransaction $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return int
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param int $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets deducted_amount
     *
     * @return int
     */
    public function getDeductedAmount()
    {
        return $this->container['deducted_amount'];
    }

    /**
     * Sets deducted_amount
     *
     * @param int $deducted_amount deducted_amount
     *
     * @return self
     */
    public function setDeductedAmount($deducted_amount)
    {
        if (is_null($deducted_amount)) {
            throw new \InvalidArgumentException('non-nullable deducted_amount cannot be null');
        }
        $this->container['deducted_amount'] = $deducted_amount;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return mixed
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param mixed $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            array_push($this->openAPINullablesSetToNull, 'channel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets merchant_note
     *
     * @return string
     */
    public function getMerchantNote()
    {
        return $this->container['merchant_note'];
    }

    /**
     * Sets merchant_note
     *
     * @param string $merchant_note merchant_note
     *
     * @return self
     */
    public function setMerchantNote($merchant_note)
    {
        if (is_null($merchant_note)) {
            throw new \InvalidArgumentException('non-nullable merchant_note cannot be null');
        }
        $this->container['merchant_note'] = $merchant_note;

        return $this;
    }

    /**
     * Gets customer_note
     *
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     *
     * @param string $customer_note customer_note
     *
     * @return self
     */
    public function setCustomerNote($customer_note)
    {
        if (is_null($customer_note)) {
            throw new \InvalidArgumentException('non-nullable customer_note cannot be null');
        }
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets refunded_by
     *
     * @return string
     */
    public function getRefundedBy()
    {
        return $this->container['refunded_by'];
    }

    /**
     * Sets refunded_by
     *
     * @param string $refunded_by refunded_by
     *
     * @return self
     */
    public function setRefundedBy($refunded_by)
    {
        if (is_null($refunded_by)) {
            throw new \InvalidArgumentException('non-nullable refunded_by cannot be null');
        }
        $this->container['refunded_by'] = $refunded_by;

        return $this;
    }

    /**
     * Gets expected_at
     *
     * @return string
     */
    public function getExpectedAt()
    {
        return $this->container['expected_at'];
    }

    /**
     * Sets expected_at
     *
     * @param string $expected_at expected_at
     *
     * @return self
     */
    public function setExpectedAt($expected_at)
    {
        if (is_null($expected_at)) {
            throw new \InvalidArgumentException('non-nullable expected_at cannot be null');
        }
        $this->container['expected_at'] = $expected_at;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets fully_deducted
     *
     * @return bool
     */
    public function getFullyDeducted()
    {
        return $this->container['fully_deducted'];
    }

    /**
     * Sets fully_deducted
     *
     * @param bool $fully_deducted fully_deducted
     *
     * @return self
     */
    public function setFullyDeducted($fully_deducted)
    {
        if (is_null($fully_deducted)) {
            throw new \InvalidArgumentException('non-nullable fully_deducted cannot be null');
        }
        $this->container['fully_deducted'] = $fully_deducted;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


