<?php
/**
 * ProductFetchResponseData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Paystack
 *
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: techsupport@paystack.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductFetchResponseData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductFetchResponseData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductFetchResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'digital_assets' => 'mixed[]',
        'integration' => 'int',
        'name' => 'string',
        'description' => 'string',
        'product_code' => 'string',
        'price' => 'int',
        'currency' => 'string',
        'quantity' => 'int',
        'quantity_sold' => 'mixed',
        'type' => 'string',
        'files' => 'mixed[]',
        'file_path' => 'mixed',
        'is_shippable' => 'bool',
        'shipping_fields' => '\OpenAPI\Client\Model\ProductListsResponseArrayShippingFields',
        'unlimited' => 'bool',
        'domain' => 'string',
        'active' => 'bool',
        'features' => 'mixed',
        'in_stock' => 'bool',
        'metadata' => '\OpenAPI\Client\Model\ProductListsResponseArrayMetadata',
        'slug' => 'string',
        'success_message' => 'mixed',
        'redirect_url' => 'mixed',
        'split_code' => 'mixed',
        'notification_emails' => 'mixed',
        'minimum_orderable' => 'int',
        'maximum_orderable' => 'mixed',
        'low_stock_alert' => 'bool',
        'stock_threshold' => 'mixed',
        'expires_in' => 'mixed',
        'id' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'digital_assets' => null,
        'integration' => null,
        'name' => null,
        'description' => null,
        'product_code' => null,
        'price' => null,
        'currency' => null,
        'quantity' => null,
        'quantity_sold' => null,
        'type' => null,
        'files' => null,
        'file_path' => null,
        'is_shippable' => null,
        'shipping_fields' => null,
        'unlimited' => null,
        'domain' => null,
        'active' => null,
        'features' => null,
        'in_stock' => null,
        'metadata' => null,
        'slug' => null,
        'success_message' => null,
        'redirect_url' => null,
        'split_code' => null,
        'notification_emails' => null,
        'minimum_orderable' => null,
        'maximum_orderable' => null,
        'low_stock_alert' => null,
        'stock_threshold' => null,
        'expires_in' => null,
        'id' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'digital_assets' => false,
        'integration' => false,
        'name' => false,
        'description' => false,
        'product_code' => false,
        'price' => false,
        'currency' => false,
        'quantity' => false,
        'quantity_sold' => true,
        'type' => false,
        'files' => false,
        'file_path' => true,
        'is_shippable' => false,
        'shipping_fields' => false,
        'unlimited' => false,
        'domain' => false,
        'active' => false,
        'features' => true,
        'in_stock' => false,
        'metadata' => false,
        'slug' => false,
        'success_message' => true,
        'redirect_url' => true,
        'split_code' => true,
        'notification_emails' => true,
        'minimum_orderable' => false,
        'maximum_orderable' => true,
        'low_stock_alert' => false,
        'stock_threshold' => true,
        'expires_in' => true,
        'id' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'digital_assets' => 'digital_assets',
        'integration' => 'integration',
        'name' => 'name',
        'description' => 'description',
        'product_code' => 'product_code',
        'price' => 'price',
        'currency' => 'currency',
        'quantity' => 'quantity',
        'quantity_sold' => 'quantity_sold',
        'type' => 'type',
        'files' => 'files',
        'file_path' => 'file_path',
        'is_shippable' => 'is_shippable',
        'shipping_fields' => 'shipping_fields',
        'unlimited' => 'unlimited',
        'domain' => 'domain',
        'active' => 'active',
        'features' => 'features',
        'in_stock' => 'in_stock',
        'metadata' => 'metadata',
        'slug' => 'slug',
        'success_message' => 'success_message',
        'redirect_url' => 'redirect_url',
        'split_code' => 'split_code',
        'notification_emails' => 'notification_emails',
        'minimum_orderable' => 'minimum_orderable',
        'maximum_orderable' => 'maximum_orderable',
        'low_stock_alert' => 'low_stock_alert',
        'stock_threshold' => 'stock_threshold',
        'expires_in' => 'expires_in',
        'id' => 'id',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'digital_assets' => 'setDigitalAssets',
        'integration' => 'setIntegration',
        'name' => 'setName',
        'description' => 'setDescription',
        'product_code' => 'setProductCode',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'quantity' => 'setQuantity',
        'quantity_sold' => 'setQuantitySold',
        'type' => 'setType',
        'files' => 'setFiles',
        'file_path' => 'setFilePath',
        'is_shippable' => 'setIsShippable',
        'shipping_fields' => 'setShippingFields',
        'unlimited' => 'setUnlimited',
        'domain' => 'setDomain',
        'active' => 'setActive',
        'features' => 'setFeatures',
        'in_stock' => 'setInStock',
        'metadata' => 'setMetadata',
        'slug' => 'setSlug',
        'success_message' => 'setSuccessMessage',
        'redirect_url' => 'setRedirectUrl',
        'split_code' => 'setSplitCode',
        'notification_emails' => 'setNotificationEmails',
        'minimum_orderable' => 'setMinimumOrderable',
        'maximum_orderable' => 'setMaximumOrderable',
        'low_stock_alert' => 'setLowStockAlert',
        'stock_threshold' => 'setStockThreshold',
        'expires_in' => 'setExpiresIn',
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'digital_assets' => 'getDigitalAssets',
        'integration' => 'getIntegration',
        'name' => 'getName',
        'description' => 'getDescription',
        'product_code' => 'getProductCode',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'quantity' => 'getQuantity',
        'quantity_sold' => 'getQuantitySold',
        'type' => 'getType',
        'files' => 'getFiles',
        'file_path' => 'getFilePath',
        'is_shippable' => 'getIsShippable',
        'shipping_fields' => 'getShippingFields',
        'unlimited' => 'getUnlimited',
        'domain' => 'getDomain',
        'active' => 'getActive',
        'features' => 'getFeatures',
        'in_stock' => 'getInStock',
        'metadata' => 'getMetadata',
        'slug' => 'getSlug',
        'success_message' => 'getSuccessMessage',
        'redirect_url' => 'getRedirectUrl',
        'split_code' => 'getSplitCode',
        'notification_emails' => 'getNotificationEmails',
        'minimum_orderable' => 'getMinimumOrderable',
        'maximum_orderable' => 'getMaximumOrderable',
        'low_stock_alert' => 'getLowStockAlert',
        'stock_threshold' => 'getStockThreshold',
        'expires_in' => 'getExpiresIn',
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('digital_assets', $data ?? [], null);
        $this->setIfExists('integration', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('quantity_sold', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('file_path', $data ?? [], null);
        $this->setIfExists('is_shippable', $data ?? [], null);
        $this->setIfExists('shipping_fields', $data ?? [], null);
        $this->setIfExists('unlimited', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('in_stock', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('success_message', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('split_code', $data ?? [], null);
        $this->setIfExists('notification_emails', $data ?? [], null);
        $this->setIfExists('minimum_orderable', $data ?? [], null);
        $this->setIfExists('maximum_orderable', $data ?? [], null);
        $this->setIfExists('low_stock_alert', $data ?? [], null);
        $this->setIfExists('stock_threshold', $data ?? [], null);
        $this->setIfExists('expires_in', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['digital_assets'] === null) {
            $invalidProperties[] = "'digital_assets' can't be null";
        }
        if ($this->container['integration'] === null) {
            $invalidProperties[] = "'integration' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['quantity_sold'] === null) {
            $invalidProperties[] = "'quantity_sold' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['files'] === null) {
            $invalidProperties[] = "'files' can't be null";
        }
        if ($this->container['file_path'] === null) {
            $invalidProperties[] = "'file_path' can't be null";
        }
        if ($this->container['is_shippable'] === null) {
            $invalidProperties[] = "'is_shippable' can't be null";
        }
        if ($this->container['shipping_fields'] === null) {
            $invalidProperties[] = "'shipping_fields' can't be null";
        }
        if ($this->container['unlimited'] === null) {
            $invalidProperties[] = "'unlimited' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['features'] === null) {
            $invalidProperties[] = "'features' can't be null";
        }
        if ($this->container['in_stock'] === null) {
            $invalidProperties[] = "'in_stock' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['success_message'] === null) {
            $invalidProperties[] = "'success_message' can't be null";
        }
        if ($this->container['redirect_url'] === null) {
            $invalidProperties[] = "'redirect_url' can't be null";
        }
        if ($this->container['split_code'] === null) {
            $invalidProperties[] = "'split_code' can't be null";
        }
        if ($this->container['notification_emails'] === null) {
            $invalidProperties[] = "'notification_emails' can't be null";
        }
        if ($this->container['minimum_orderable'] === null) {
            $invalidProperties[] = "'minimum_orderable' can't be null";
        }
        if ($this->container['maximum_orderable'] === null) {
            $invalidProperties[] = "'maximum_orderable' can't be null";
        }
        if ($this->container['low_stock_alert'] === null) {
            $invalidProperties[] = "'low_stock_alert' can't be null";
        }
        if ($this->container['stock_threshold'] === null) {
            $invalidProperties[] = "'stock_threshold' can't be null";
        }
        if ($this->container['expires_in'] === null) {
            $invalidProperties[] = "'expires_in' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets digital_assets
     *
     * @return mixed[]
     */
    public function getDigitalAssets()
    {
        return $this->container['digital_assets'];
    }

    /**
     * Sets digital_assets
     *
     * @param mixed[] $digital_assets digital_assets
     *
     * @return self
     */
    public function setDigitalAssets($digital_assets)
    {
        if (is_null($digital_assets)) {
            throw new \InvalidArgumentException('non-nullable digital_assets cannot be null');
        }
        $this->container['digital_assets'] = $digital_assets;

        return $this;
    }

    /**
     * Gets integration
     *
     * @return int
     */
    public function getIntegration()
    {
        return $this->container['integration'];
    }

    /**
     * Sets integration
     *
     * @param int $integration integration
     *
     * @return self
     */
    public function setIntegration($integration)
    {
        if (is_null($integration)) {
            throw new \InvalidArgumentException('non-nullable integration cannot be null');
        }
        $this->container['integration'] = $integration;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code product_code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_sold
     *
     * @return mixed
     */
    public function getQuantitySold()
    {
        return $this->container['quantity_sold'];
    }

    /**
     * Sets quantity_sold
     *
     * @param mixed $quantity_sold quantity_sold
     *
     * @return self
     */
    public function setQuantitySold($quantity_sold)
    {
        if (is_null($quantity_sold)) {
            array_push($this->openAPINullablesSetToNull, 'quantity_sold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity_sold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity_sold'] = $quantity_sold;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets files
     *
     * @return mixed[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param mixed[] $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return mixed
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param mixed $file_path file_path
     *
     * @return self
     */
    public function setFilePath($file_path)
    {
        if (is_null($file_path)) {
            array_push($this->openAPINullablesSetToNull, 'file_path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets is_shippable
     *
     * @return bool
     */
    public function getIsShippable()
    {
        return $this->container['is_shippable'];
    }

    /**
     * Sets is_shippable
     *
     * @param bool $is_shippable is_shippable
     *
     * @return self
     */
    public function setIsShippable($is_shippable)
    {
        if (is_null($is_shippable)) {
            throw new \InvalidArgumentException('non-nullable is_shippable cannot be null');
        }
        $this->container['is_shippable'] = $is_shippable;

        return $this;
    }

    /**
     * Gets shipping_fields
     *
     * @return \OpenAPI\Client\Model\ProductListsResponseArrayShippingFields
     */
    public function getShippingFields()
    {
        return $this->container['shipping_fields'];
    }

    /**
     * Sets shipping_fields
     *
     * @param \OpenAPI\Client\Model\ProductListsResponseArrayShippingFields $shipping_fields shipping_fields
     *
     * @return self
     */
    public function setShippingFields($shipping_fields)
    {
        if (is_null($shipping_fields)) {
            throw new \InvalidArgumentException('non-nullable shipping_fields cannot be null');
        }
        $this->container['shipping_fields'] = $shipping_fields;

        return $this;
    }

    /**
     * Gets unlimited
     *
     * @return bool
     */
    public function getUnlimited()
    {
        return $this->container['unlimited'];
    }

    /**
     * Sets unlimited
     *
     * @param bool $unlimited unlimited
     *
     * @return self
     */
    public function setUnlimited($unlimited)
    {
        if (is_null($unlimited)) {
            throw new \InvalidArgumentException('non-nullable unlimited cannot be null');
        }
        $this->container['unlimited'] = $unlimited;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets features
     *
     * @return mixed
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param mixed $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            array_push($this->openAPINullablesSetToNull, 'features');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('features', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets in_stock
     *
     * @return bool
     */
    public function getInStock()
    {
        return $this->container['in_stock'];
    }

    /**
     * Sets in_stock
     *
     * @param bool $in_stock in_stock
     *
     * @return self
     */
    public function setInStock($in_stock)
    {
        if (is_null($in_stock)) {
            throw new \InvalidArgumentException('non-nullable in_stock cannot be null');
        }
        $this->container['in_stock'] = $in_stock;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\ProductListsResponseArrayMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\ProductListsResponseArrayMetadata $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets success_message
     *
     * @return mixed
     */
    public function getSuccessMessage()
    {
        return $this->container['success_message'];
    }

    /**
     * Sets success_message
     *
     * @param mixed $success_message success_message
     *
     * @return self
     */
    public function setSuccessMessage($success_message)
    {
        if (is_null($success_message)) {
            array_push($this->openAPINullablesSetToNull, 'success_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('success_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['success_message'] = $success_message;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return mixed
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param mixed $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets split_code
     *
     * @return mixed
     */
    public function getSplitCode()
    {
        return $this->container['split_code'];
    }

    /**
     * Sets split_code
     *
     * @param mixed $split_code split_code
     *
     * @return self
     */
    public function setSplitCode($split_code)
    {
        if (is_null($split_code)) {
            array_push($this->openAPINullablesSetToNull, 'split_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('split_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['split_code'] = $split_code;

        return $this;
    }

    /**
     * Gets notification_emails
     *
     * @return mixed
     */
    public function getNotificationEmails()
    {
        return $this->container['notification_emails'];
    }

    /**
     * Sets notification_emails
     *
     * @param mixed $notification_emails notification_emails
     *
     * @return self
     */
    public function setNotificationEmails($notification_emails)
    {
        if (is_null($notification_emails)) {
            array_push($this->openAPINullablesSetToNull, 'notification_emails');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_emails', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_emails'] = $notification_emails;

        return $this;
    }

    /**
     * Gets minimum_orderable
     *
     * @return int
     */
    public function getMinimumOrderable()
    {
        return $this->container['minimum_orderable'];
    }

    /**
     * Sets minimum_orderable
     *
     * @param int $minimum_orderable minimum_orderable
     *
     * @return self
     */
    public function setMinimumOrderable($minimum_orderable)
    {
        if (is_null($minimum_orderable)) {
            throw new \InvalidArgumentException('non-nullable minimum_orderable cannot be null');
        }
        $this->container['minimum_orderable'] = $minimum_orderable;

        return $this;
    }

    /**
     * Gets maximum_orderable
     *
     * @return mixed
     */
    public function getMaximumOrderable()
    {
        return $this->container['maximum_orderable'];
    }

    /**
     * Sets maximum_orderable
     *
     * @param mixed $maximum_orderable maximum_orderable
     *
     * @return self
     */
    public function setMaximumOrderable($maximum_orderable)
    {
        if (is_null($maximum_orderable)) {
            array_push($this->openAPINullablesSetToNull, 'maximum_orderable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maximum_orderable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maximum_orderable'] = $maximum_orderable;

        return $this;
    }

    /**
     * Gets low_stock_alert
     *
     * @return bool
     */
    public function getLowStockAlert()
    {
        return $this->container['low_stock_alert'];
    }

    /**
     * Sets low_stock_alert
     *
     * @param bool $low_stock_alert low_stock_alert
     *
     * @return self
     */
    public function setLowStockAlert($low_stock_alert)
    {
        if (is_null($low_stock_alert)) {
            throw new \InvalidArgumentException('non-nullable low_stock_alert cannot be null');
        }
        $this->container['low_stock_alert'] = $low_stock_alert;

        return $this;
    }

    /**
     * Gets stock_threshold
     *
     * @return mixed
     */
    public function getStockThreshold()
    {
        return $this->container['stock_threshold'];
    }

    /**
     * Sets stock_threshold
     *
     * @param mixed $stock_threshold stock_threshold
     *
     * @return self
     */
    public function setStockThreshold($stock_threshold)
    {
        if (is_null($stock_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'stock_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stock_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stock_threshold'] = $stock_threshold;

        return $this;
    }

    /**
     * Gets expires_in
     *
     * @return mixed
     */
    public function getExpiresIn()
    {
        return $this->container['expires_in'];
    }

    /**
     * Sets expires_in
     *
     * @param mixed $expires_in expires_in
     *
     * @return self
     */
    public function setExpiresIn($expires_in)
    {
        if (is_null($expires_in)) {
            array_push($this->openAPINullablesSetToNull, 'expires_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expires_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expires_in'] = $expires_in;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


